<?php //%255BApp%255CEntity%255CUser%255D%255B1%255D

return [PHP_INT_MAX, static function () { return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\Entity'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Entity')),
        clone ($p['Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity')),
        clone ($p['Doctrine\\ORM\\Mapping\\HasLifecycleCallbacks'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\HasLifecycleCallbacks')),
        clone ($p['ApiPlatform\\Core\\Annotation\\ApiResource'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('ApiPlatform\\Core\\Annotation\\ApiResource')),
    ],
    null,
    [
        'stdClass' => [
            'repositoryClass' => [
                'App\\Repository\\UserRepository',
            ],
            'message' => [
                1 => 'L\'email existe dÃ©jÃ ',
            ],
            'fields' => [
                1 => [
                    'email',
                ],
            ],
            'groups' => [
                1 => [
                    'Default',
                ],
            ],
            'collectionOperations' => [
                3 => [
                    'GET',
                    'POST',
                    'total_user' => [
                        'method' => 'get',
                        'path' => '/totaluser',
                        'controller' => 'App\\Controller\\CountUserController',
                        'swagger_context' => [
                            'summary' => 'Total user',
                            'description' => 'Renvoie le nombre total de users actifs et inactifs',
                        ],
                    ],
                ],
            ],
            'attributes' => [
                3 => [
                    'normalization_context' => [
                        'groups' => [
                            'users_read',
                        ],
                    ],
                    'denormalization_context' => [
                        'groups' => [
                            'user_write',
                        ],
                    ],
                ],
            ],
        ],
    ],
    [
        $o[0],
        $o[1],
        $o[2],
        $o[3],
    ],
    []
); }];
