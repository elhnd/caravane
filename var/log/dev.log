[2020-07-06T20:32:17.669359+00:00] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2020-07-06T20:32:18.133861+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'autres_operation' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-06T20:32:18.297650+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'autres_operation' */ WHERE k.table_name = 'autres_operation' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-06T20:32:18.330834+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'autres_operation' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-06T20:32:18.332600+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'autres_operation' [] []
[2020-07-06T20:32:18.368898+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'caisse' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-06T20:32:18.385597+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'caisse' */ WHERE k.table_name = 'caisse' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-06T20:32:18.388044+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'caisse' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-06T20:32:18.389529+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'caisse' [] []
[2020-07-06T20:32:18.390919+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'categorie' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-06T20:32:18.393692+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'categorie' */ WHERE k.table_name = 'categorie' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-06T20:32:18.396088+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'categorie' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-06T20:32:18.397573+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'categorie' [] []
[2020-07-06T20:32:18.398899+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'client' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-06T20:32:18.401780+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'client' */ WHERE k.table_name = 'client' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-06T20:32:18.403846+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'client' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-06T20:32:18.405139+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'client' [] []
[2020-07-06T20:32:18.406303+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'depot' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-06T20:32:18.409250+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'depot' */ WHERE k.table_name = 'depot' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-06T20:32:18.411072+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'depot' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-06T20:32:18.412715+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'depot' [] []
[2020-07-06T20:32:18.413877+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'fournisseur' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-06T20:32:18.417536+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'fournisseur' */ WHERE k.table_name = 'fournisseur' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-06T20:32:18.419253+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'fournisseur' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-06T20:32:18.420679+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'fournisseur' [] []
[2020-07-06T20:32:18.421902+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-06T20:32:18.423901+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'migration_versions' */ WHERE k.table_name = 'migration_versions' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-06T20:32:18.425541+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'migration_versions' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-06T20:32:18.426822+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'migration_versions' [] []
[2020-07-06T20:32:18.428021+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'produit' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-06T20:32:18.431372+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'produit' */ WHERE k.table_name = 'produit' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-06T20:32:18.433304+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'produit' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-06T20:32:18.435404+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'produit' [] []
[2020-07-06T20:32:18.436635+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'refresh_tokens' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-06T20:32:18.438864+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'refresh_tokens' */ WHERE k.table_name = 'refresh_tokens' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-06T20:32:18.440656+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'refresh_tokens' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-06T20:32:18.442032+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'refresh_tokens' [] []
[2020-07-06T20:32:18.443244+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'user' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-06T20:32:18.446242+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'user' */ WHERE k.table_name = 'user' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-06T20:32:18.447997+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'user' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-06T20:32:18.449500+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'user' [] []
[2020-07-06T20:32:18.450706+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'vente' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-06T20:32:18.453771+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'vente' */ WHERE k.table_name = 'vente' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-06T20:32:18.455602+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'vente' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-06T20:32:18.457238+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'vente' [] []
[2020-07-06T20:32:18.458431+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'vente_produit' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-06T20:32:18.461646+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'vente_produit' */ WHERE k.table_name = 'vente_produit' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-06T20:32:18.463539+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'vente_produit' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-06T20:32:18.465520+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'vente_produit' [] []
[2020-07-06T20:34:35.160863+00:00] request.INFO: Matched route "api_doc". {"route":"api_doc","route_parameters":{"_route":"api_doc","_controller":"api_platform.action.documentation","_format":"","_api_respond":"true"},"request_uri":"https://127.0.0.1:8000/api/docs","method":"GET"} []
[2020-07-06T20:34:35.172129+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-06T20:34:35.172241+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:34:35.172339+00:00] security.DEBUG: Guard authenticator does not support the request. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:34:35.176309+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T20:34:36.192608+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"fb6a79"},"request_uri":"https://127.0.0.1:8000/_wdt/fb6a79","method":"GET"} []
[2020-07-06T20:34:37.452393+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T20:34:37.491406+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T20:53:53.656557+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"login"},"request_uri":"https://127.0.0.1:8000/login","method":"GET"} []
[2020-07-06T20:53:53.659117+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T20:53:54.363583+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"15cb69"},"request_uri":"https://127.0.0.1:8000/_wdt/15cb69","method":"GET"} []
[2020-07-06T20:53:54.775166+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T20:53:54.777899+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T20:53:57.846465+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T20:53:57.849544+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T20:54:01.059081+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T20:54:01.062446+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T20:54:48.384333+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T20:54:48.387258+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T20:54:53.634330+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T20:54:53.636829+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T20:54:57.628122+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T20:54:57.630592+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T20:55:02.179294+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T20:55:02.181723+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T20:58:53.968027+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"client"},"request_uri":"https://127.0.0.1:8000/client","method":"GET"} []
[2020-07-06T20:58:53.970537+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T20:58:55.025057+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_controller":"Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController::urlRedirectAction","path":"/api/clients","permanent":true,"scheme":null,"httpPort":80,"httpsPort":8000,"_route":"api_clients_GET_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients//","method":"GET"} []
[2020-07-06T20:58:55.027505+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-06T20:58:55.027791+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:55.028076+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:55.064704+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:55.097205+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-06T20:58:55.110007+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:55.110660+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:55.110837+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:55.210982+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"1dbba1"},"request_uri":"https://127.0.0.1:8000/_wdt/1dbba1","method":"GET"} []
[2020-07-06T20:58:55.451970+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-06T20:58:55.453487+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-06T20:58:55.453624+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:55.453773+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:55.455507+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:55.462879+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-06T20:58:55.464110+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:55.464402+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:55.464510+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:55.538278+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-06T20:58:55.565264+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [3] []
[2020-07-06T20:58:55.573744+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [4] []
[2020-07-06T20:58:55.576629+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [5] []
[2020-07-06T20:58:55.577755+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [6] []
[2020-07-06T20:58:55.578612+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [7] []
[2020-07-06T20:58:55.579469+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [8] []
[2020-07-06T20:58:55.582321+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-06T20:58:55.662239+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T20:58:55.664666+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T20:58:58.727760+00:00] request.INFO: Matched route "api_users_total_user_collection". {"route":"api_users_total_user_collection","route_parameters":{"_route":"api_users_total_user_collection","_controller":"App\\Controller\\CountUserController","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"total_user"},"request_uri":"https://127.0.0.1:8000/api/totaluser","method":"GET"} []
[2020-07-06T20:58:58.729433+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-06T20:58:58.729579+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:58.729725+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:58.731099+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:58.738990+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-06T20:58:58.740279+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:58.740576+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:58.740702+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:58.749546+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-06T20:58:58.752025+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",true] []
[2020-07-06T20:58:58.753089+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",false] []
[2020-07-06T20:58:58.819853+00:00] request.INFO: Matched route "api_users_GET_collection". {"route":"api_users_GET_collection","route_parameters":{"_route":"api_users_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/users","method":"GET"} []
[2020-07-06T20:58:58.821214+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-06T20:58:58.821339+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:58.821489+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:58.822586+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:58.829552+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-06T20:58:58.830754+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:58.831025+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:58.831238+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T20:58:58.887199+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ORDER BY u0_.id ASC LIMIT 30 ["%ROLE_SUPER_ADMIN%"] []
[2020-07-06T20:58:58.923807+00:00] doctrine.DEBUG: SELECT count(u0_.id) AS sclr_0 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-06T20:58:59.002194+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T20:58:59.004176+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T21:45:59.956357+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"user/list"},"request_uri":"https://127.0.0.1:8000/user/list","method":"GET"} []
[2020-07-06T21:45:59.958878+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T21:46:00.929121+00:00] request.INFO: Matched route "api_users_total_user_collection". {"route":"api_users_total_user_collection","route_parameters":{"_route":"api_users_total_user_collection","_controller":"App\\Controller\\CountUserController","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"total_user"},"request_uri":"https://127.0.0.1:8000/api/totaluser","method":"GET"} []
[2020-07-06T21:46:00.932080+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-06T21:46:00.932392+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:00.932700+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:00.935085+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:00.949417+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-06T21:46:00.950640+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:00.950915+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:00.951022+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:00.961359+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-06T21:46:00.963482+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",true] []
[2020-07-06T21:46:00.964604+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",false] []
[2020-07-06T21:46:01.036847+00:00] request.INFO: Matched route "api_users_GET_collection". {"route":"api_users_GET_collection","route_parameters":{"_route":"api_users_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/users","method":"GET"} []
[2020-07-06T21:46:01.038478+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-06T21:46:01.038670+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:01.038821+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:01.040011+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:01.046711+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-06T21:46:01.047796+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:01.048054+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:01.048167+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:01.069494+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ORDER BY u0_.id ASC LIMIT 30 ["%ROLE_SUPER_ADMIN%"] []
[2020-07-06T21:46:01.075531+00:00] doctrine.DEBUG: SELECT count(u0_.id) AS sclr_0 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-06T21:46:01.152456+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"1bf40b"},"request_uri":"https://127.0.0.1:8000/_wdt/1bf40b","method":"GET"} []
[2020-07-06T21:46:01.462343+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T21:46:01.464541+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T21:46:11.093337+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-06T21:46:11.095210+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-06T21:46:11.095361+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:11.095524+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:11.097045+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:11.104225+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-06T21:46:11.105352+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:11.105607+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:11.105714+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:46:11.111706+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-06T21:46:11.184860+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T21:46:11.187184+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T21:46:16.125452+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"documents/d9e1a7e1cd125cf91eccba64a58522bc.png"},"request_uri":"https://127.0.0.1:8000/documents/d9e1a7e1cd125cf91eccba64a58522bc.png","method":"GET"} []
[2020-07-06T21:46:16.127974+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T21:58:00.773068+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"categorie"},"request_uri":"https://127.0.0.1:8000/categorie","method":"GET"} []
[2020-07-06T21:58:00.776086+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T21:58:01.648164+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"4d7750"},"request_uri":"https://127.0.0.1:8000/_wdt/4d7750","method":"GET"} []
[2020-07-06T21:58:02.002619+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T21:58:02.004695+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T21:58:03.367545+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"login"},"request_uri":"https://127.0.0.1:8000/login","method":"POST"} []
[2020-07-06T21:58:03.379857+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-06T21:58:03.538604+00:00] security.INFO: User has been authenticated successfully. {"username":"eldji22@hotmail.fr"} []
[2020-07-06T21:58:03.737858+00:00] doctrine.DEBUG: SELECT t0.refresh_token AS refresh_token_1, t0.username AS username_2, t0.valid AS valid_3, t0.id AS id_4 FROM refresh_tokens t0 WHERE t0.refresh_token = ? ["b7a7fcd6ebeb2e1fee030874df [...]"] []
[2020-07-06T21:58:03.759371+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-06T21:58:03.762841+00:00] doctrine.DEBUG: INSERT INTO refresh_tokens (refresh_token, username, valid) VALUES (?, ?, ?) {"1":"b7a7fcd6ebeb2e1fee030874df [...]","2":"eldji22@hotmail.fr","3":"2020-08-05T21:58:03+00:00"} []
[2020-07-06T21:58:03.763843+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-06T21:58:03.874569+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-06T21:58:04.114877+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-06T21:58:04.117831+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-06T21:58:04.118116+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:58:04.118431+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:58:04.120741+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:58:04.129450+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-06T21:58:04.130580+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:58:04.130834+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:58:04.130941+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:58:04.136323+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-06T21:58:04.215942+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T21:58:04.217892+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-06T21:58:04.225082+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [1] []
[2020-07-06T21:58:04.225994+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-06T21:58:04.234000+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-06T21:58:06.099736+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-06T21:58:06.101205+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-06T21:58:06.101329+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:58:06.101464+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:58:06.102619+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:58:06.110432+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-06T21:58:06.111641+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:58:06.111905+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:58:06.112013+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T21:58:06.119677+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-06T21:58:06.197338+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T21:58:06.199154+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-06T21:58:06.206451+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [1] []
[2020-07-06T21:58:06.207597+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-06T21:58:06.215117+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-06T22:59:20.480695+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"categorie"},"request_uri":"https://127.0.0.1:8000/categorie","method":"GET"} []
[2020-07-06T22:59:20.483393+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T22:59:21.402573+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"35d15b"},"request_uri":"https://127.0.0.1:8000/_wdt/35d15b","method":"GET"} []
[2020-07-06T22:59:21.784650+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T22:59:21.786670+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-06T22:59:23.369103+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"login"},"request_uri":"https://127.0.0.1:8000/login","method":"POST"} []
[2020-07-06T22:59:23.379478+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-06T22:59:23.539894+00:00] security.INFO: User has been authenticated successfully. {"username":"eldji22@hotmail.fr"} []
[2020-07-06T22:59:23.562054+00:00] doctrine.DEBUG: SELECT t0.refresh_token AS refresh_token_1, t0.username AS username_2, t0.valid AS valid_3, t0.id AS id_4 FROM refresh_tokens t0 WHERE t0.refresh_token = ? ["955edb2e58f7115e4bf202c601 [...]"] []
[2020-07-06T22:59:23.563066+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-06T22:59:23.563491+00:00] doctrine.DEBUG: INSERT INTO refresh_tokens (refresh_token, username, valid) VALUES (?, ?, ?) {"1":"955edb2e58f7115e4bf202c601 [...]","2":"eldji22@hotmail.fr","3":"2020-08-05T22:59:23+00:00"} []
[2020-07-06T22:59:23.563909+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-06T22:59:23.629634+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-06T22:59:23.858454+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-06T22:59:23.860977+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-06T22:59:23.861158+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T22:59:23.861333+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T22:59:23.862976+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T22:59:23.872543+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-06T22:59:23.873776+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T22:59:23.874052+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T22:59:23.874166+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-06T22:59:23.879724+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-06T22:59:23.955140+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-06T22:59:23.958276+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-06T22:59:23.967260+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [1] []
[2020-07-06T22:59:23.968268+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-06T22:59:23.975726+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:23:44.743227+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":""},"request_uri":"https://127.0.0.1:8000/","method":"GET"} []
[2020-07-07T22:23:45.389091+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-07T22:23:50.882241+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"95fcf6"},"request_uri":"https://127.0.0.1:8000/_wdt/95fcf6","method":"GET"} []
[2020-07-07T22:23:52.348879+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:23:52.351186+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-07T22:25:48.404460+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"login"},"request_uri":"https://127.0.0.1:8000/login","method":"POST"} []
[2020-07-07T22:25:49.168162+00:00] security.INFO: Authentication request failed. {"exception":"[object] (Symfony\\Component\\Security\\Core\\Exception\\AuthenticationServiceException(code: 0): An exception occurred in driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/symfony/security-core/Authentication/Provider/DaoAuthenticationProvider.php:96)\n[previous exception] [object] (Doctrine\\DBAL\\Exception\\ConnectionException(code: 0): An exception occurred in driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/AbstractMySQLDriver.php:93)\n[previous exception] [object] (Doctrine\\DBAL\\Driver\\PDOException(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:31)\n[previous exception] [object] (PDOException(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:27)"} []
[2020-07-07T22:25:49.354492+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":""},"request_uri":"https://127.0.0.1:8000/","method":"GET"} []
[2020-07-07T22:25:49.356634+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-07T22:25:50.259761+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"6f25f2"},"request_uri":"https://127.0.0.1:8000/_wdt/6f25f2","method":"GET"} []
[2020-07-07T22:25:50.572206+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:25:50.574857+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-07T22:25:52.127872+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"login"},"request_uri":"https://127.0.0.1:8000/login","method":"POST"} []
[2020-07-07T22:25:52.138960+00:00] security.INFO: Authentication request failed. {"exception":"[object] (Symfony\\Component\\Security\\Core\\Exception\\AuthenticationServiceException(code: 0): An exception occurred in driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/symfony/security-core/Authentication/Provider/DaoAuthenticationProvider.php:96)\n[previous exception] [object] (Doctrine\\DBAL\\Exception\\ConnectionException(code: 0): An exception occurred in driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/AbstractMySQLDriver.php:93)\n[previous exception] [object] (Doctrine\\DBAL\\Driver\\PDOException(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:31)\n[previous exception] [object] (PDOException(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:27)"} []
[2020-07-07T22:25:52.231734+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":""},"request_uri":"https://127.0.0.1:8000/","method":"GET"} []
[2020-07-07T22:25:52.234274+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-07T22:25:52.891700+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"c26698"},"request_uri":"https://127.0.0.1:8000/_wdt/c26698","method":"GET"} []
[2020-07-07T22:25:53.012693+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:25:53.014923+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-07T22:25:55.115117+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"login"},"request_uri":"https://127.0.0.1:8000/login","method":"GET"} []
[2020-07-07T22:25:55.117589+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-07T22:25:55.699379+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"96e36d"},"request_uri":"https://127.0.0.1:8000/_wdt/96e36d","method":"GET"} []
[2020-07-07T22:25:55.819382+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:25:55.821537+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-07T22:26:41.197375+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"login"},"request_uri":"https://127.0.0.1:8000/login","method":"GET"} []
[2020-07-07T22:26:41.200001+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-07T22:26:41.877758+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"7a4d76"},"request_uri":"https://127.0.0.1:8000/_wdt/7a4d76","method":"GET"} []
[2020-07-07T22:26:42.331178+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:26:42.333543+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-07T22:26:44.017226+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"login"},"request_uri":"https://127.0.0.1:8000/login","method":"POST"} []
[2020-07-07T22:26:44.028050+00:00] security.INFO: Authentication request failed. {"exception":"[object] (Symfony\\Component\\Security\\Core\\Exception\\AuthenticationServiceException(code: 0): An exception occurred in driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/symfony/security-core/Authentication/Provider/DaoAuthenticationProvider.php:96)\n[previous exception] [object] (Doctrine\\DBAL\\Exception\\ConnectionException(code: 0): An exception occurred in driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/AbstractMySQLDriver.php:93)\n[previous exception] [object] (Doctrine\\DBAL\\Driver\\PDOException(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:31)\n[previous exception] [object] (PDOException(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:27)"} []
[2020-07-07T22:26:44.123175+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":""},"request_uri":"https://127.0.0.1:8000/","method":"GET"} []
[2020-07-07T22:26:44.125469+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-07T22:26:44.693363+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"4860b6"},"request_uri":"https://127.0.0.1:8000/_wdt/4860b6","method":"GET"} []
[2020-07-07T22:26:44.822168+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:26:44.824514+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-07T22:27:06.251563+00:00] console.ERROR: Error thrown while running command "'d:f:l'". Message: "An exception occurred in driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES)" {"exception":"[object] (Doctrine\\DBAL\\Exception\\ConnectionException(code: 0): An exception occurred in driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/AbstractMySQLDriver.php:93)\n[previous exception] [object] (Doctrine\\DBAL\\Driver\\PDOException(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:31)\n[previous exception] [object] (PDOException(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES) at /home/eldji/caravane/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:27)","command":"'d:f:l'","message":"An exception occurred in driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: YES)"} []
[2020-07-07T22:27:06.257446+00:00] console.DEBUG: Command "'d:f:l'" exited with code "1" {"command":"'d:f:l'","code":1} []
[2020-07-07T22:28:00.939716+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:28:02.053720+00:00] doctrine.DEBUG: DELETE FROM depot [] []
[2020-07-07T22:28:02.072144+00:00] doctrine.DEBUG: DELETE FROM vente_produit [] []
[2020-07-07T22:28:02.088247+00:00] doctrine.DEBUG: DELETE FROM produit [] []
[2020-07-07T22:28:02.089444+00:00] doctrine.DEBUG: DELETE FROM vente [] []
[2020-07-07T22:28:02.090476+00:00] doctrine.DEBUG: DELETE FROM client [] []
[2020-07-07T22:28:02.103889+00:00] doctrine.DEBUG: DELETE FROM autres_operation [] []
[2020-07-07T22:28:02.105096+00:00] doctrine.DEBUG: DELETE FROM fournisseur [] []
[2020-07-07T22:28:02.106140+00:00] doctrine.DEBUG: DELETE FROM categorie [] []
[2020-07-07T22:28:02.107157+00:00] doctrine.DEBUG: DELETE FROM caisse [] []
[2020-07-07T22:28:02.108170+00:00] doctrine.DEBUG: DELETE FROM user [] []
[2020-07-07T22:28:02.120828+00:00] doctrine.DEBUG: DELETE FROM refresh_tokens [] []
[2020-07-07T22:28:03.925766+00:00] doctrine.DEBUG: INSERT INTO user (email, roles, password, name, phone, is_activated, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"eldji0@hotmail.fr","2":["ROLE_ADMIN"],"3":"$argon2i$v=19$m=65536,t=4, [...]","4":"El HADJI","5":"778988770","6":true,"7":"2020-07-07T22:28:02+00:00","8":"2020-07-07T22:28:02+00:00"} []
[2020-07-07T22:28:03.926469+00:00] doctrine.DEBUG: INSERT INTO user (email, roles, password, name, phone, is_activated, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"eldji1@hotmail.fr","2":["ROLE_ADMIN"],"3":"$argon2i$v=19$m=65536,t=4, [...]","4":"El HADJI","5":"778988771","6":true,"7":"2020-07-07T22:28:02+00:00","8":"2020-07-07T22:28:02+00:00"} []
[2020-07-07T22:28:03.926991+00:00] doctrine.DEBUG: INSERT INTO user (email, roles, password, name, phone, is_activated, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"eldji2@hotmail.fr","2":["ROLE_ADMIN"],"3":"$argon2i$v=19$m=65536,t=4, [...]","4":"El HADJI","5":"778988772","6":true,"7":"2020-07-07T22:28:03+00:00","8":"2020-07-07T22:28:03+00:00"} []
[2020-07-07T22:28:03.927496+00:00] doctrine.DEBUG: INSERT INTO user (email, roles, password, name, phone, is_activated, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"eldji3@hotmail.fr","2":["ROLE_ADMIN"],"3":"$argon2i$v=19$m=65536,t=4, [...]","4":"El HADJI","5":"778988773","6":true,"7":"2020-07-07T22:28:03+00:00","8":"2020-07-07T22:28:03+00:00"} []
[2020-07-07T22:28:03.928006+00:00] doctrine.DEBUG: INSERT INTO user (email, roles, password, name, phone, is_activated, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"eldji4@hotmail.fr","2":["ROLE_ADMIN"],"3":"$argon2i$v=19$m=65536,t=4, [...]","4":"El HADJI","5":"778988774","6":true,"7":"2020-07-07T22:28:03+00:00","8":"2020-07-07T22:28:03+00:00"} []
[2020-07-07T22:28:03.928545+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:28:43.503229+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"login"},"request_uri":"https://127.0.0.1:8000/login","method":"POST"} []
[2020-07-07T22:28:43.515847+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:28:43.824480+00:00] security.INFO: User has been authenticated successfully. {"username":"eldji22@hotmail.fr"} []
[2020-07-07T22:28:45.108807+00:00] doctrine.DEBUG: SELECT t0.refresh_token AS refresh_token_1, t0.username AS username_2, t0.valid AS valid_3, t0.id AS id_4 FROM refresh_tokens t0 WHERE t0.refresh_token = ? ["0b19d32707624111a1ede7e01b [...]"] []
[2020-07-07T22:28:45.133087+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:28:45.137135+00:00] doctrine.DEBUG: INSERT INTO refresh_tokens (refresh_token, username, valid) VALUES (?, ?, ?) {"1":"0b19d32707624111a1ede7e01b [...]","2":"eldji22@hotmail.fr","3":"2020-08-06T22:28:44+00:00"} []
[2020-07-07T22:28:45.138617+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:28:45.221561+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:28:45.499539+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-07T22:28:45.545567+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:28:45.545830+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:45.546115+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:45.618515+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:45.625949+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:28:45.628351+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:45.628651+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:45.628765+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:45.676981+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-07T22:28:45.756963+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:28:45.758779+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:28:45.765527+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:28:45.779618+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:28:45.787257+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:28:48.807436+00:00] request.INFO: Matched route "api_users_total_user_collection". {"route":"api_users_total_user_collection","route_parameters":{"_route":"api_users_total_user_collection","_controller":"App\\Controller\\CountUserController","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"total_user"},"request_uri":"https://127.0.0.1:8000/api/totaluser","method":"GET"} []
[2020-07-07T22:28:48.821444+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:28:48.821598+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:48.821747+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:48.822961+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:48.830608+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:28:48.835896+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:48.836270+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:48.836400+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:49.765406+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T22:28:49.866210+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",true] []
[2020-07-07T22:28:49.869612+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",false] []
[2020-07-07T22:28:49.952210+00:00] request.INFO: Matched route "api_users_GET_collection". {"route":"api_users_GET_collection","route_parameters":{"_route":"api_users_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/users","method":"GET"} []
[2020-07-07T22:28:49.953612+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:28:49.953741+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:49.953888+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:49.954982+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:49.961877+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:28:49.963786+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:49.964075+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:49.964188+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:28:50.138298+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ORDER BY u0_.id ASC LIMIT 30 ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T22:28:50.381139+00:00] doctrine.DEBUG: SELECT count(u0_.id) AS sclr_0 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T22:28:50.656041+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:28:50.658041+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:28:50.665368+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:28:50.718621+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:28:50.743909+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:29:25.300055+00:00] request.INFO: Matched route "api_users_POST_collection". {"route":"api_users_POST_collection","route_parameters":{"_route":"api_users_POST_collection","_controller":"api_platform.action.post_collection","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"POST"},"request_uri":"https://127.0.0.1:8000/api/users","method":"POST"} []
[2020-07-07T22:29:25.301578+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:29:25.301725+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:25.301894+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:25.303129+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:25.342199+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:29:25.408160+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:25.409282+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:25.409739+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:25.950386+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? ["test@test.fr"] []
[2020-07-07T22:29:26.288062+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:29:26.288738+00:00] doctrine.DEBUG: INSERT INTO user (email, roles, password, name, phone, is_activated, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"test@test.fr","2":["ROLE_USER"],"3":"$argon2i$v=19$m=65536,t=4, [...]","4":"Mor NDIAYE","5":"0772331937","6":true,"7":"2020-07-07T22:29:26+00:00","8":"2020-07-07T22:29:26+00:00"} []
[2020-07-07T22:29:26.289234+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:29:26.342229+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [7] []
[2020-07-07T22:29:32.449058+00:00] request.INFO: Matched route "api_users_GET_collection". {"route":"api_users_GET_collection","route_parameters":{"_route":"api_users_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/users","method":"GET"} []
[2020-07-07T22:29:32.451030+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:29:32.451168+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:32.451314+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:32.452650+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:32.461114+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:29:32.486734+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:32.487120+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:32.487251+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:32.517212+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ORDER BY u0_.id ASC LIMIT 30 ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T22:29:32.522256+00:00] doctrine.DEBUG: SELECT count(u0_.id) AS sclr_0 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T22:29:37.666227+00:00] request.INFO: Matched route "api_users_put_item". {"route":"api_users_put_item","route_parameters":{"_route":"api_users_put_item","_controller":"api_platform.action.put_item","_format":null,"_api_resource_class":"App\\Entity\\User","_api_item_operation_name":"put","id":"7"},"request_uri":"https://127.0.0.1:8000/api/users/7","method":"PUT"} []
[2020-07-07T22:29:37.667761+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:29:37.667926+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:37.668090+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:37.669368+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:37.677319+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:29:37.701196+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:37.702168+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:37.702568+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:37.913024+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.id = ? AND u0_.roles NOT LIKE ? [7,"%ROLE_SUPER_ADMIN%"] []
[2020-07-07T22:29:38.032112+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? ["test@test.fr"] []
[2020-07-07T22:29:38.033530+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:29:38.049785+00:00] doctrine.DEBUG: UPDATE user SET is_activated = ?, updated_at = ? WHERE id = ? [false,"2020-07-07T22:29:38+00:00",7] []
[2020-07-07T22:29:38.050343+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:29:38.118256+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [7] []
[2020-07-07T22:29:38.282735+00:00] request.INFO: Matched route "api_users_total_user_collection". {"route":"api_users_total_user_collection","route_parameters":{"_route":"api_users_total_user_collection","_controller":"App\\Controller\\CountUserController","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"total_user"},"request_uri":"https://127.0.0.1:8000/api/totaluser","method":"GET"} []
[2020-07-07T22:29:38.284137+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:29:38.284275+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:38.284417+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:38.285514+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:38.292116+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:29:38.302986+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:38.303358+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:38.303472+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:38.310555+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T22:29:38.312276+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",true] []
[2020-07-07T22:29:38.313122+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",false] []
[2020-07-07T22:29:47.236179+00:00] request.INFO: Matched route "api_users_put_item". {"route":"api_users_put_item","route_parameters":{"_route":"api_users_put_item","_controller":"api_platform.action.put_item","_format":null,"_api_resource_class":"App\\Entity\\User","_api_item_operation_name":"put","id":"7"},"request_uri":"https://127.0.0.1:8000/api/users/7","method":"PUT"} []
[2020-07-07T22:29:47.237841+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:29:47.237991+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:47.238133+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:47.239411+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:47.247340+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:29:47.279500+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:47.279831+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:47.279962+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:47.286933+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.id = ? AND u0_.roles NOT LIKE ? [7,"%ROLE_SUPER_ADMIN%"] []
[2020-07-07T22:29:47.324446+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? ["test@test.fr"] []
[2020-07-07T22:29:47.326249+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:29:47.326959+00:00] doctrine.DEBUG: UPDATE user SET is_activated = ?, updated_at = ? WHERE id = ? [true,"2020-07-07T22:29:47+00:00",7] []
[2020-07-07T22:29:47.327517+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:29:47.389799+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [7] []
[2020-07-07T22:29:47.575979+00:00] request.INFO: Matched route "api_users_total_user_collection". {"route":"api_users_total_user_collection","route_parameters":{"_route":"api_users_total_user_collection","_controller":"App\\Controller\\CountUserController","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"total_user"},"request_uri":"https://127.0.0.1:8000/api/totaluser","method":"GET"} []
[2020-07-07T22:29:47.577439+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:29:47.577573+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:47.577717+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:47.578877+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:47.585874+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:29:47.630651+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:47.631585+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:47.631981+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:47.654726+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T22:29:47.701003+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",true] []
[2020-07-07T22:29:47.704691+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",false] []
[2020-07-07T22:29:53.292056+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_controller":"Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController::urlRedirectAction","path":"/api/clients","permanent":true,"scheme":null,"httpPort":80,"httpsPort":8000,"_route":"api_clients_GET_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients//","method":"GET"} []
[2020-07-07T22:29:53.293718+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:29:53.293882+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:53.294029+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:53.295339+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:53.302529+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:29:53.304066+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:53.304430+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:53.304545+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:53.602834+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:29:53.604722+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:29:53.611554+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:29:53.612715+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:29:53.621013+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:29:53.677286+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T22:29:53.678682+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:29:53.678809+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:53.678948+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:53.680053+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:53.687351+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:29:53.688928+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:53.689197+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:53.689308+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:53.711880+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T22:29:53.713244+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T22:29:59.720012+00:00] request.INFO: Matched route "client_new". {"route":"client_new","route_parameters":{"_route":"client_new","_controller":"App\\Controller\\ClientController::new"},"request_uri":"https://127.0.0.1:8000/api/client/new","method":"POST"} []
[2020-07-07T22:29:59.722841+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:29:59.723013+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:59.723164+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:59.724397+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:59.734974+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:29:59.833369+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:59.834352+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:29:59.834754+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:00.023290+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:30:00.023931+00:00] doctrine.DEBUG: INSERT INTO client (nom_complet, telephone, adresse, created_at, updated_at) VALUES (?, ?, ?, ?, ?) {"1":"Mor NDIAYE","2":"0772331937","3":"Sicap Mbao","4":"2020-07-07T22:29:59+00:00","5":"2020-07-07T22:29:59+00:00"} []
[2020-07-07T22:30:00.024452+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:30:00.176584+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_controller":"Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController::urlRedirectAction","path":"/api/clients","permanent":true,"scheme":null,"httpPort":80,"httpsPort":8000,"_route":"api_clients_GET_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients//","method":"GET"} []
[2020-07-07T22:30:00.177974+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:30:00.178104+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:00.178255+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:00.179351+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:00.186436+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:30:00.196997+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:00.197270+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:00.197381+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:00.281107+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T22:30:00.282484+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:30:00.282613+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:00.282753+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:00.283868+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:00.290631+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:30:00.312686+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:00.312970+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:00.313081+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:00.336270+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T22:30:00.501995+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T22:30:00.509857+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T22:30:02.813578+00:00] request.INFO: Matched route "client_show". {"route":"client_show","route_parameters":{"_route":"client_show","_controller":"App\\Controller\\ClientController::show","id":"1"},"request_uri":"https://127.0.0.1:8000/api/client/1","method":"GET"} []
[2020-07-07T22:30:02.816525+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:30:02.816779+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:02.816947+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:02.819019+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:02.827177+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:30:02.847025+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:02.847996+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:02.848472+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:02.893583+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.nom_complet AS nom_complet_2, t0.telephone AS telephone_3, t0.adresse AS adresse_4, t0.created_at AS created_at_5, t0.updated_at AS updated_at_6 FROM client t0 WHERE t0.id = ? ["1"] []
[2020-07-07T22:30:02.921547+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T22:30:08.630691+00:00] request.INFO: Matched route "client_edit". {"route":"client_edit","route_parameters":{"_route":"client_edit","_controller":"App\\Controller\\ClientController::edit","id":"1"},"request_uri":"https://127.0.0.1:8000/api/client/1/edit","method":"POST"} []
[2020-07-07T22:30:08.632116+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:30:08.632243+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.632407+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.633596+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.640849+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:30:08.642174+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.642442+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.642553+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.690424+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.nom_complet AS nom_complet_2, t0.telephone AS telephone_3, t0.adresse AS adresse_4, t0.created_at AS created_at_5, t0.updated_at AS updated_at_6 FROM client t0 WHERE t0.id = ? ["1"] []
[2020-07-07T22:30:08.697182+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:30:08.697881+00:00] doctrine.DEBUG: UPDATE client SET adresse = ?, updated_at = ? WHERE id = ? ["Sicap","2020-07-07T22:30:08+00:00",1] []
[2020-07-07T22:30:08.698522+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:30:08.844898+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_controller":"Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController::urlRedirectAction","path":"/api/clients","permanent":true,"scheme":null,"httpPort":80,"httpsPort":8000,"_route":"api_clients_GET_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients//","method":"GET"} []
[2020-07-07T22:30:08.846952+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:30:08.847103+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.847255+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.848514+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.855430+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:30:08.863710+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.863983+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.864095+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.953152+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T22:30:08.954581+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:30:08.954710+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.954850+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.955955+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.962821+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:30:08.964217+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.964522+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.964636+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:08.987708+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T22:30:08.995116+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T22:30:08.997092+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T22:30:18.953671+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-07T22:30:18.955135+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:30:18.955263+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:18.955402+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:18.956640+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:18.964492+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:30:18.966093+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:18.966367+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:18.966495+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:19.066535+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-07T22:30:19.140249+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:30:19.142194+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:30:19.149608+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:30:19.157589+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:30:19.165811+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:30:55.129853+00:00] request.INFO: Matched route "fournisseur_new". {"route":"fournisseur_new","route_parameters":{"_route":"fournisseur_new","_controller":"App\\Controller\\FournisseurController::new"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/new","method":"POST"} []
[2020-07-07T22:30:55.132163+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:30:55.132326+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:55.132470+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:55.133696+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:55.140972+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:30:55.142582+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:55.142965+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:55.143133+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:55.197288+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ WHERE f0_.structure = ? ["droo"] []
[2020-07-07T22:30:55.204508+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:30:55.205280+00:00] doctrine.DEBUG: INSERT INTO fournisseur (structure, nom_gerant, tel, email, adresse, commission, frais_exposition, token_access, token_expire_at, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) {"1":"droo","2":"fatou","3":"778989656","4":"fat@hu.fr","5":"tesAdresse","6":1500.0,"7":"1520","8":null,"9":null,"10":"2020-07-07T22:30:55+00:00","11":"2020-07-07T22:30:55+00:00"} []
[2020-07-07T22:30:55.205879+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:30:55.352962+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-07T22:30:55.354333+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:30:55.354468+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:55.354612+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:55.355731+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:55.362623+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:30:55.364382+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:55.364654+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:55.364769+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:55.372394+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-07T22:30:57.066887+00:00] request.INFO: Matched route "fournisseur_show". {"route":"fournisseur_show","route_parameters":{"_route":"fournisseur_show","_controller":"App\\Controller\\FournisseurController::show","id":"1"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/1","method":"GET"} []
[2020-07-07T22:30:57.068403+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:30:57.068545+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:57.068689+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:57.069841+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:57.077894+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:30:57.079372+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:57.079689+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:57.079916+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:30:57.105645+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? ["1"] []
[2020-07-07T22:31:03.257718+00:00] request.INFO: Matched route "fournisseur_edit". {"route":"fournisseur_edit","route_parameters":{"_route":"fournisseur_edit","_controller":"App\\Controller\\FournisseurController::edit","id":"1"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/1/edit","method":"POST"} []
[2020-07-07T22:31:03.259774+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:03.259928+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.260092+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.261587+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.269846+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:03.270951+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.271217+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.271327+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.279469+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? ["1"] []
[2020-07-07T22:31:03.295208+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:31:03.295803+00:00] doctrine.DEBUG: UPDATE fournisseur SET nom_gerant = ?, updated_at = ? WHERE id = ? ["fa","2020-07-07T22:31:03+00:00",1] []
[2020-07-07T22:31:03.296293+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:31:03.495111+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-07T22:31:03.497847+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:03.498046+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.498279+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.499770+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.508160+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:03.527766+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.528086+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.528211+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.540637+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-07T22:31:03.748053+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-07T22:31:03.749408+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:03.749540+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.749684+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.750824+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.770911+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:03.772974+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.773246+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.773360+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:03.781151+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-07T22:31:06.259471+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"fournisseur"},"request_uri":"https://127.0.0.1:8000/fournisseur","method":"GET"} []
[2020-07-07T22:31:06.261516+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:31:06.268958+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:31:06.285063+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:31:06.299497+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:31:07.951161+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-07T22:31:07.953083+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:07.953234+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:07.953381+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:07.954673+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:07.963007+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:07.965219+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:07.965760+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:07.965970+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:07.977351+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-07T22:31:08.050281+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"cbfdf8"},"request_uri":"https://127.0.0.1:8000/_wdt/cbfdf8","method":"GET"} []
[2020-07-07T22:31:08.378424+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:31:08.381431+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:31:08.389054+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:31:08.390311+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:31:08.398430+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:31:10.620325+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-07T22:31:10.621841+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:10.621969+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:10.622107+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:10.623277+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:10.631050+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:10.632676+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:10.632935+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:10.633058+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:10.638567+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-07T22:31:10.783818+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:31:10.785701+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:31:10.813390+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:31:10.814584+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:31:10.822889+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:31:20.868763+00:00] request.INFO: Matched route "category_new". {"route":"category_new","route_parameters":{"_route":"category_new","_controller":"App\\Controller\\CategorieController::newCategory"},"request_uri":"https://127.0.0.1:8000/api/newCategorie","method":"POST"} []
[2020-07-07T22:31:20.870163+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:20.870291+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:20.870430+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:20.871610+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:20.880347+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:20.881765+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:20.882027+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:20.882135+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:20.933363+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:31:20.934085+00:00] doctrine.DEBUG: INSERT INTO categorie (image, libelle, created_at, updated_at) VALUES (?, ?, ?, ?) {"1":"b64a66278faf694bd014c0c497 [...]","2":"test","3":"2020-07-07T22:31:20+00:00","4":"2020-07-07T22:31:20+00:00"} []
[2020-07-07T22:31:20.934692+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:31:21.161402+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-07T22:31:21.163273+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:21.163551+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:21.163790+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:21.165250+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:21.172117+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:21.173634+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:21.173896+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:21.174010+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:21.179283+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-07T22:31:24.986672+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-07T22:31:24.988159+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:24.988305+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:24.988447+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:24.989615+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:24.997056+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:24.998824+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:24.999256+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:24.999388+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.015192+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-07T22:31:25.100920+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-07T22:31:25.102341+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:25.102503+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.102727+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.104149+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.147211+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:25.151708+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.152775+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.153193+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.174651+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-07T22:31:25.251248+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-07T22:31:25.252765+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:25.252899+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.253044+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.254155+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.260896+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:25.262357+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.262613+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.262724+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.270111+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-07T22:31:25.341863+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T22:31:25.343402+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:25.343531+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.343684+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.344909+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.351819+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:25.353476+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.353739+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.353851+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:25.424246+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T22:31:25.475670+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T22:31:25.577318+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:31:25.579097+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:31:25.586902+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:31:25.588894+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:31:25.596452+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:31:52.762101+00:00] request.INFO: Matched route "produity_new". {"route":"produity_new","route_parameters":{"_route":"produity_new","_controller":"App\\Controller\\ProduitController::newProduits"},"request_uri":"https://127.0.0.1:8000/api/newProduit","method":"POST"} []
[2020-07-07T22:31:52.765023+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:52.765347+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:52.765698+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:52.768292+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:52.783709+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:52.785918+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:52.786421+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:52.786641+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:52.805771+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.libelle = ? LIMIT 1 ["test"] []
[2020-07-07T22:31:52.807466+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.structure = ? LIMIT 1 ["droo"] []
[2020-07-07T22:31:52.824795+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:31:52.825494+00:00] doctrine.DEBUG: INSERT INTO produit (designation, taille, age, pointure, couleur, prix_vente, quantite, created_at, updated_at, fournisseur_id, categorie_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) {"1":"prod1","2":"12","3":"12","4":"2","5":"green","6":"125","7":12,"8":"2020-07-07T22:31:52+00:00","9":"2020-07-07T22:31:52+00:00","10":1,"11":1} []
[2020-07-07T22:31:52.826157+00:00] doctrine.DEBUG: INSERT INTO depot (stock_initial, quantite_deposee, total_stock_apres_depot, quantite_vendue, stock_final, created_at, updated_at, produit_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":12,"2":12,"3":12,"4":0,"5":12,"6":"2020-07-07T22:31:52+00:00","7":"2020-07-07T22:31:52+00:00","8":1} []
[2020-07-07T22:31:52.842686+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:31:53.028724+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-07T22:31:53.030091+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:53.030220+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.030362+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.031476+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.041542+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:53.043174+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.043442+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.043553+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.065498+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-07T22:31:53.146971+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-07T22:31:53.148743+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-07T22:31:53.221019+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-07T22:31:53.222341+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:53.222467+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.222605+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.223721+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.232443+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:53.234597+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.235088+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.235295+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.243898+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-07T22:31:53.314616+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-07T22:31:53.316278+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:53.316421+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.316564+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.317791+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.325271+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:53.326735+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.327002+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.327114+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:53.332312+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-07T22:31:55.420345+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"produit"},"request_uri":"https://127.0.0.1:8000/produit","method":"GET"} []
[2020-07-07T22:31:55.422454+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:31:55.430465+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:31:55.431599+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:31:55.440520+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:31:56.541491+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-07T22:31:56.542840+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:56.542960+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.543089+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.544243+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.551240+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:56.552608+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.552866+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.552968+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.565689+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-07T22:31:56.585030+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-07T22:31:56.585792+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-07T22:31:56.660220+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-07T22:31:56.661419+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:56.661532+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.661667+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.662642+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.668472+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:56.669908+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.670194+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.670308+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.677253+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-07T22:31:56.731760+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-07T22:31:56.732822+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:56.732920+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.733025+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.733888+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.739263+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:56.754563+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.754848+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.754957+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.759662+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-07T22:31:56.832135+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T22:31:56.834784+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:56.835027+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.835276+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.837281+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.845841+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:56.882036+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.882281+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.882380+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:56.902269+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T22:31:56.934998+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T22:31:57.042626+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"309fb9"},"request_uri":"https://127.0.0.1:8000/_wdt/309fb9","method":"GET"} []
[2020-07-07T22:31:57.176964+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:31:57.179784+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:31:57.188793+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:31:57.190096+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:31:57.198242+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:31:59.448858+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:31:59.450644+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:31:59.450772+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:59.450913+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:59.452148+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:59.460093+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:31:59.504334+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:59.505417+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:59.505821+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:31:59.761873+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:32:00.117931+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:32:00.225693+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:32:00.228678+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:32:00.228922+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:00.229205+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:00.231357+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:00.243053+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:32:00.245054+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:00.245533+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:00.245654+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:00.320374+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:32:00.388877+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:32:00.469317+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:32:00.471110+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:32:00.478039+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:32:00.479480+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:32:00.488654+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:32:43.399240+00:00] request.INFO: Matched route "api_depots_post_collection". {"route":"api_depots_post_collection","route_parameters":{"_route":"api_depots_post_collection","_controller":"api_platform.action.post_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"post"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"POST"} []
[2020-07-07T22:32:43.400700+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:32:43.400830+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:43.401043+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:43.402321+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:43.429096+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:32:43.493583+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:43.493852+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:43.493951+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:43.557473+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, p0_.fournisseur_id AS fournisseur_id_10, p0_.categorie_id AS categorie_id_11 FROM produit p0_ WHERE p0_.id = ? [1] []
[2020-07-07T22:32:43.641078+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:32:43.641581+00:00] doctrine.DEBUG: INSERT INTO depot (stock_initial, quantite_deposee, total_stock_apres_depot, quantite_vendue, stock_final, created_at, updated_at, produit_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":0,"2":15,"3":0,"4":0,"5":0,"6":"2020-07-07T22:32:43+00:00","7":"2020-07-07T22:32:43+00:00","8":1} []
[2020-07-07T22:32:43.641964+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:32:43.748460+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.stock_initial AS stock_initial_2, t0.quantite_deposee AS quantite_deposee_3, t0.total_stock_apres_depot AS total_stock_apres_depot_4, t0.quantite_vendue AS quantite_vendue_5, t0.stock_final AS stock_final_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.produit_id AS produit_id_9 FROM depot t0 WHERE t0.id = ? [2] []
[2020-07-07T22:32:44.260712+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-07T22:32:44.269714+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-07T22:32:44.350586+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:32:44.351870+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:32:44.351982+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:44.352104+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:44.353161+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:44.359694+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:32:44.360950+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:44.361198+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:44.361294+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:44.387353+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:32:44.413413+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:32:44.576709+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:32:44.577985+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:32:44.578089+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:44.578203+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:44.579150+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:44.585076+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:32:44.604837+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:44.605076+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:44.605164+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:32:44.626186+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:32:44.635817+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:45:32.686536+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"depot"},"request_uri":"https://127.0.0.1:8000/depot","method":"GET"} []
[2020-07-07T22:45:32.715372+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:45:32.745915+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:45:32.782696+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:45:32.792394+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:45:34.711664+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:45:34.714267+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:45:34.714480+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:34.714709+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:34.938393+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:35.305587+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:45:35.328330+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:35.370140+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:35.370369+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:36.269640+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:45:39.358243+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:45:40.422720+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:45:40.434570+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:45:40.434731+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:40.434882+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:40.436146+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:40.443588+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:45:40.484472+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:40.485525+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:40.485931+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:40.742103+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:45:41.706782+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:45:42.147491+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"0db193"},"request_uri":"https://127.0.0.1:8000/_wdt/0db193","method":"GET"} []
[2020-07-07T22:45:44.084368+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:45:44.088415+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:45:44.097313+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:45:44.348567+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:45:44.361779+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:45:44.651581+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-07T22:45:44.653589+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:45:44.653782+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:44.653989+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:44.655757+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:44.685044+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:45:44.686596+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:44.686904+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:44.687018+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:44.858845+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-07T22:45:45.334084+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-07T22:45:45.335582+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-07T22:45:45.526149+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-07T22:45:45.528957+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:45:45.529226+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:45.529530+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:45.531755+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:45.545578+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:45:45.596589+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:45.597031+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:45.597145+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:45.782757+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-07T22:45:46.027133+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-07T22:45:46.028547+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:45:46.028678+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:46.028820+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:46.029938+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:46.055958+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:45:46.073812+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:46.074237+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:46.074428+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:46.113896+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-07T22:45:46.502883+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T22:45:46.504521+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:45:46.504656+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:46.504797+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:46.505928+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:46.512938+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:45:46.514378+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:46.514720+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:46.514860+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:46.549379+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T22:45:46.584734+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T22:45:47.031909+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:45:47.033828+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:45:47.040699+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:45:47.042072+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:45:47.050381+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:45:51.891942+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:45:51.895769+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:45:51.895998+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:51.896274+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:51.898479+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:52.552174+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:45:52.687620+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:52.688685+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:52.689090+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:52.760344+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:45:53.156787+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:45:53.582815+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:45:53.584454+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:45:53.584591+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:53.584737+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:53.585904+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:53.593178+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:45:53.659386+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:53.659666+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:53.659775+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:45:53.697504+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:45:54.217384+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:45:54.506665+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:45:54.508851+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:45:54.516778+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:45:54.605327+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:45:54.619540+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:46:09.605785+00:00] request.INFO: Matched route "api_depots_put_item". {"route":"api_depots_put_item","route_parameters":{"_route":"api_depots_put_item","_controller":"api_platform.action.put_item","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_item_operation_name":"put","id":"2"},"request_uri":"https://127.0.0.1:8000/api/depots/2","method":"PUT"} []
[2020-07-07T22:46:09.607316+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:46:09.607448+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:09.607592+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:09.608837+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:09.682719+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:46:09.805279+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:09.806378+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:09.806784+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:11.544936+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id WHERE d0_.id = ? [2] []
[2020-07-07T22:46:12.052312+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, p0_.fournisseur_id AS fournisseur_id_10, p0_.categorie_id AS categorie_id_11 FROM produit p0_ WHERE p0_.id = ? [1] []
[2020-07-07T22:46:12.090419+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:46:12.220218+00:00] doctrine.DEBUG: UPDATE depot SET quantite_deposee = ?, total_stock_apres_depot = ?, stock_final = ?, created_at = ?, updated_at = ? WHERE id = ? [12,12,12,"2020-07-07T22:32:43+00:00","2020-07-07T22:46:12+00:00",2] []
[2020-07-07T22:46:12.307368+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:46:12.459151+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.stock_initial AS stock_initial_2, t0.quantite_deposee AS quantite_deposee_3, t0.total_stock_apres_depot AS total_stock_apres_depot_4, t0.quantite_vendue AS quantite_vendue_5, t0.stock_final AS stock_final_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.produit_id AS produit_id_9 FROM depot t0 WHERE t0.id = ? [2] []
[2020-07-07T22:46:12.717917+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:46:12.719603+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:46:12.719731+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:12.719870+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:12.721178+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:12.730086+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:46:12.943348+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:12.944609+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:12.945129+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:12.994276+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:46:13.010436+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:46:13.083857+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:46:13.085349+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:46:13.085478+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:13.085616+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:13.086951+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:13.093841+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:46:13.095286+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:13.095551+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:13.095661+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:13.119183+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:46:13.131732+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:46:47.975522+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"depot"},"request_uri":"https://127.0.0.1:8000/depot","method":"GET"} []
[2020-07-07T22:46:48.119979+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-07T22:46:49.537631+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"0928b5"},"request_uri":"https://127.0.0.1:8000/_wdt/0928b5","method":"GET"} []
[2020-07-07T22:46:50.265852+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:46:50.269824+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-07T22:46:52.318301+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"login"},"request_uri":"https://127.0.0.1:8000/login","method":"POST"} []
[2020-07-07T22:46:52.352483+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:46:52.929695+00:00] security.INFO: User has been authenticated successfully. {"username":"eldji22@hotmail.fr"} []
[2020-07-07T22:46:53.761290+00:00] doctrine.DEBUG: SELECT t0.refresh_token AS refresh_token_1, t0.username AS username_2, t0.valid AS valid_3, t0.id AS id_4 FROM refresh_tokens t0 WHERE t0.refresh_token = ? ["8b76a0211e6954b059b49e8013 [...]"] []
[2020-07-07T22:46:53.781665+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:46:53.810715+00:00] doctrine.DEBUG: INSERT INTO refresh_tokens (refresh_token, username, valid) VALUES (?, ?, ?) {"1":"8b76a0211e6954b059b49e8013 [...]","2":"eldji22@hotmail.fr","3":"2020-08-06T22:46:53+00:00"} []
[2020-07-07T22:46:53.828054+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:46:54.021996+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:46:54.325518+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-07T22:46:54.327773+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:46:54.328068+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:54.328384+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:54.331037+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:54.349483+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:46:54.351746+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:54.352022+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:54.352137+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:54.357875+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-07T22:46:54.449134+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:46:54.450946+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:46:54.460671+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:46:54.461808+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:46:54.469309+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:46:57.161955+00:00] request.INFO: Matched route "api_users_total_user_collection". {"route":"api_users_total_user_collection","route_parameters":{"_route":"api_users_total_user_collection","_controller":"App\\Controller\\CountUserController","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"total_user"},"request_uri":"https://127.0.0.1:8000/api/totaluser","method":"GET"} []
[2020-07-07T22:46:57.163441+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:46:57.163578+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:57.163720+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:57.165125+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:57.172759+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:46:57.226843+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:57.228654+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:57.229341+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:57.376879+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T22:46:57.381099+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",true] []
[2020-07-07T22:46:57.382912+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",false] []
[2020-07-07T22:46:57.451512+00:00] request.INFO: Matched route "api_users_GET_collection". {"route":"api_users_GET_collection","route_parameters":{"_route":"api_users_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/users","method":"GET"} []
[2020-07-07T22:46:57.453163+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:46:57.453313+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:57.453467+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:57.454633+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:57.464086+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:46:57.466288+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:57.466775+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:57.466990+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:46:57.515809+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ORDER BY u0_.id ASC LIMIT 30 ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T22:46:57.703763+00:00] doctrine.DEBUG: SELECT count(u0_.id) AS sclr_0 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T22:46:57.817254+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:46:57.820593+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:46:57.827568+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:46:57.828969+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:46:57.838074+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:47:00.382282+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-07T22:47:00.384088+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:00.384308+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.384467+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.385718+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.393226+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:00.397481+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.397842+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.397978+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.413938+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-07T22:47:00.477310+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-07T22:47:00.478836+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-07T22:47:00.549871+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-07T22:47:00.551286+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:00.551418+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.551559+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.552805+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.560145+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:00.565856+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.566285+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.566404+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.575366+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-07T22:47:00.687317+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-07T22:47:00.688676+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:00.688831+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.688973+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.690091+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.697553+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:00.698988+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.699248+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.699357+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.704700+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-07T22:47:00.833977+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T22:47:00.835615+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:00.835747+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.835887+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.837015+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.897295+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:00.917144+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.918063+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.918461+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:00.959450+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:00.962459+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T22:47:01.038249+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:47:01.040284+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:47:01.047005+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:47:01.048203+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:47:01.056403+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:47:03.609460+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:47:03.611217+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:03.611380+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:03.611521+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:03.612788+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:03.623805+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:03.639756+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:03.640540+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:03.640749+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:03.677563+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:03.692447+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:47:03.768738+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:47:03.770362+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:03.770496+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:03.770639+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:03.771780+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:03.779017+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:03.780521+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:03.780786+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:03.780897+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:03.806934+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:03.819445+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:47:03.893513+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:47:03.895339+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:47:03.913776+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:47:03.917006+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:47:03.931724+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:47:13.962565+00:00] request.INFO: Matched route "api_depots_put_item". {"route":"api_depots_put_item","route_parameters":{"_route":"api_depots_put_item","_controller":"api_platform.action.put_item","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_item_operation_name":"put","id":"2"},"request_uri":"https://127.0.0.1:8000/api/depots/2","method":"PUT"} []
[2020-07-07T22:47:13.964112+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:13.964243+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:13.964420+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:13.965629+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:13.980262+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:14.052274+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.052528+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.052629+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.074596+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id WHERE d0_.id = ? [2] []
[2020-07-07T22:47:14.082636+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, p0_.fournisseur_id AS fournisseur_id_10, p0_.categorie_id AS categorie_id_11 FROM produit p0_ WHERE p0_.id = ? [1] []
[2020-07-07T22:47:14.091704+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:47:14.092353+00:00] doctrine.DEBUG: UPDATE depot SET quantite_deposee = ?, total_stock_apres_depot = ?, stock_final = ?, created_at = ?, updated_at = ? WHERE id = ? [10,22,22,"2020-07-07T22:32:43+00:00","2020-07-07T22:47:14+00:00",2] []
[2020-07-07T22:47:14.092875+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:47:14.145293+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.stock_initial AS stock_initial_2, t0.quantite_deposee AS quantite_deposee_3, t0.total_stock_apres_depot AS total_stock_apres_depot_4, t0.quantite_vendue AS quantite_vendue_5, t0.stock_final AS stock_final_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.produit_id AS produit_id_9 FROM depot t0 WHERE t0.id = ? [2] []
[2020-07-07T22:47:14.231022+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:47:14.232453+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:14.232571+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.232698+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.233723+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.241153+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:14.243071+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.243433+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.243591+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.271240+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:14.284104+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:47:14.414927+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:47:14.416881+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:14.417026+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.417165+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.418330+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.424793+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:14.442555+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.442809+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.442913+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:14.465854+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:14.477121+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:47:17.411785+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:47:17.413499+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:17.413632+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:17.413778+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:17.415019+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:17.423390+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:17.472642+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:17.473654+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:17.474060+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:17.520782+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:17.535784+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:47:17.834763+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:47:17.836311+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:17.836446+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:17.836591+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:17.837770+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:17.844643+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:17.847361+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:17.847624+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:17.847735+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:17.872913+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:17.960862+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:47:18.916790+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:47:18.918511+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:18.918654+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:18.918801+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:18.919969+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:18.926934+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:18.928479+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:18.928742+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:18.928857+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:18.958107+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:18.971557+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:47:19.054576+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:47:19.056163+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:19.056330+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:19.056481+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:19.057891+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:19.064657+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:19.066049+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:19.066318+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:19.066428+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:19.091732+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:19.104173+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:47:21.123938+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"depot"},"request_uri":"https://127.0.0.1:8000/depot","method":"GET"} []
[2020-07-07T22:47:21.125980+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:47:21.133515+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:47:21.134996+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:47:21.143384+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:47:22.585894+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:47:22.587395+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:22.587515+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:22.587648+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:22.588797+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:22.595732+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:22.597288+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:22.597537+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:22.597641+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:22.620812+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:22.637607+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:47:22.703168+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:47:22.704606+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:22.704722+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:22.704849+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:22.705847+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:22.713196+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:22.714882+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:22.715133+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:22.715237+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:22.740764+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:22.753428+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:47:23.038316+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"3a1b40"},"request_uri":"https://127.0.0.1:8000/_wdt/3a1b40","method":"GET"} []
[2020-07-07T22:47:23.439358+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:47:23.441637+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:47:23.467980+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:47:23.469347+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:47:23.478089+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:47:26.189609+00:00] request.INFO: Matched route "api_depots_delete_item". {"route":"api_depots_delete_item","route_parameters":{"_route":"api_depots_delete_item","_controller":"api_platform.action.delete_item","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_item_operation_name":"delete","id":"2"},"request_uri":"https://127.0.0.1:8000/api/depots/2","method":"DELETE"} []
[2020-07-07T22:47:26.191143+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:26.191293+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:26.191514+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:26.193633+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:26.211354+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:26.239407+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:26.240872+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:26.241338+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:26.521018+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id WHERE d0_.id = ? [2] []
[2020-07-07T22:47:26.548476+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:47:26.548918+00:00] doctrine.DEBUG: DELETE FROM depot WHERE id = ? [2] []
[2020-07-07T22:47:26.549784+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:47:33.329160+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"depot"},"request_uri":"https://127.0.0.1:8000/depot","method":"GET"} []
[2020-07-07T22:47:33.331247+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:47:33.339435+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:47:33.377997+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:47:33.403571+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:47:34.665836+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:47:34.667365+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:34.667489+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:34.667633+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:34.668868+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:34.676213+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:34.678074+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:34.678323+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:34.678423+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:34.705757+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:34.717015+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:47:34.784095+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:47:34.785436+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:34.785548+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:34.785679+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:34.786661+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:34.794600+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:34.795814+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:34.796059+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:34.796155+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:34.817504+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:34.827548+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:47:35.011083+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"959a69"},"request_uri":"https://127.0.0.1:8000/_wdt/959a69","method":"GET"} []
[2020-07-07T22:47:35.226802+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:47:35.228593+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:47:35.235437+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:47:35.236741+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:47:35.244031+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:47:45.527779+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:47:45.530848+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:45.531095+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:45.531329+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:45.532727+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:45.540053+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:45.541497+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:45.541744+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:45.541848+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:45.572705+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:45.584651+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:47:45.664777+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:47:45.666224+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:47:45.666343+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:45.666472+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:45.667519+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:45.674397+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:47:45.675862+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:45.676106+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:45.676208+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:47:45.698699+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:47:45.710507+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:48:09.000884+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"depot"},"request_uri":"https://127.0.0.1:8000/depot","method":"GET"} []
[2020-07-07T22:48:09.002961+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:48:09.010590+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:48:09.027574+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:48:09.055935+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:48:10.244954+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:48:10.246485+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:10.246615+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:10.246757+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:10.248071+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:10.255266+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:10.256588+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:10.256852+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:10.256963+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:10.285725+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:10.299762+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:48:10.367133+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:48:10.368687+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:10.368816+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:10.368977+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:10.370045+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:10.376434+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:10.378000+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:10.378243+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:10.378347+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:10.401443+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:10.415146+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:48:10.656620+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"0b6949"},"request_uri":"https://127.0.0.1:8000/_wdt/0b6949","method":"GET"} []
[2020-07-07T22:48:10.895481+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:48:10.898127+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:48:10.906392+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:48:10.907523+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:48:10.915308+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:48:12.362458+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T22:48:12.406560+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:12.406721+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:12.406877+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:12.408077+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:12.416488+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:12.417973+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:12.418249+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:12.418364+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.078656+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:14.082809+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T22:48:14.216353+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:48:14.217976+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:14.218108+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.218252+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.219531+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.226930+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:14.228300+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.228621+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.228734+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.256514+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:14.268901+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:48:14.470643+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T22:48:14.472380+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:14.472531+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.472681+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.474010+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.481413+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:14.483192+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.483466+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.483581+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.520546+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:14.546814+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T22:48:14.550627+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T22:48:14.644876+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T22:48:14.646357+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:14.646483+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.646629+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.647694+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.655498+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:14.657057+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.657299+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.657403+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.680427+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:14.683093+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T22:48:14.759101+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:48:14.760859+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:48:14.767654+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:48:14.768820+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:48:14.775578+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:48:14.862289+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T22:48:14.863662+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:14.863777+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.863902+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.864984+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.872034+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:14.873510+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.873741+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.873848+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:14.904521+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:14.906605+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T22:48:17.871507+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:48:17.873375+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:17.873510+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:17.873692+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:17.874912+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:17.883267+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:17.884674+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:17.884994+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:17.885108+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:17.917108+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:17.930025+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:48:18.027085+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T22:48:18.030001+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:18.030262+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:18.030584+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:18.032833+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:18.040308+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:18.069956+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:18.070929+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:18.071334+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:18.110326+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:18.167508+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T22:48:18.170908+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T22:48:18.250389+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:48:18.252233+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:48:18.279199+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:48:18.281710+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:48:18.294810+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:48:42.254550+00:00] request.INFO: Matched route "api_ventes_post_collection". {"route":"api_ventes_post_collection","route_parameters":{"_route":"api_ventes_post_collection","_controller":"api_platform.action.post_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"post"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"POST"} []
[2020-07-07T22:48:42.255953+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:42.256079+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:42.256220+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:42.257544+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:42.266382+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:42.352597+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:42.353093+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:42.353414+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:42.414384+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.nom_complet AS nom_complet_2, t0.telephone AS telephone_3, t0.adresse AS adresse_4, t0.created_at AS created_at_5, t0.updated_at AS updated_at_6 FROM client t0 WHERE t0.id = ? [1] []
[2020-07-07T22:48:42.415505+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 WHERE t0.id = ? [1] []
[2020-07-07T22:48:42.424828+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.stock_initial AS stock_initial_2, t0.quantite_deposee AS quantite_deposee_3, t0.total_stock_apres_depot AS total_stock_apres_depot_4, t0.quantite_vendue AS quantite_vendue_5, t0.stock_final AS stock_final_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.produit_id AS produit_id_9 FROM depot t0 WHERE t0.produit_id = ? [1] []
[2020-07-07T22:48:42.429721+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:48:42.430366+00:00] doctrine.DEBUG: INSERT INTO vente (total_vente, date_vente, type_paiement, montant_verse, montant_rendu, created_at, updated_at, client_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"1500","2":"2020-07-09","3":"cheque","4":"1500","5":"12","6":"2020-07-07T22:48:42+00:00","7":"2020-07-07T22:48:42+00:00","8":1} []
[2020-07-07T22:48:42.431073+00:00] doctrine.DEBUG: INSERT INTO vente_produit (quantite_vendue, prix_vente_total, prix_net_payer, status, commentaire, date_vente, created_at, updated_at, vente_id, produit_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) {"1":12,"2":"1500","3":"1500","4":null,"5":null,"6":"2020-07-09","7":"2020-07-07T22:48:42+00:00","8":"2020-07-07T22:48:42+00:00","9":1,"10":1} []
[2020-07-07T22:48:42.431734+00:00] doctrine.DEBUG: UPDATE depot SET quantite_vendue = ?, stock_final = ?, updated_at = ? WHERE id = ? [12,0,"2020-07-07T22:48:42+00:00",1] []
[2020-07-07T22:48:42.444043+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:48:42.505705+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.id = ? [1] []
[2020-07-07T22:48:42.594059+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.quantite_vendue AS quantite_vendue_2, t0.prix_vente_total AS prix_vente_total_3, t0.prix_net_payer AS prix_net_payer_4, t0.status AS status_5, t0.commentaire AS commentaire_6, t0.date_vente AS date_vente_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9, t0.vente_id AS vente_id_10, t0.produit_id AS produit_id_11 FROM vente_produit t0 WHERE t0.vente_id = ? [1] []
[2020-07-07T22:48:42.796140+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-07T22:48:42.928863+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-07T22:48:52.252455+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:48:52.254145+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:52.254275+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:52.254424+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:52.255782+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:52.263615+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:52.264903+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:52.265165+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:52.265275+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:52.296740+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:52.309414+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:48:52.381550+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:48:52.383210+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:52.383341+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:52.383483+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:52.384615+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:52.391277+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:52.405518+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:52.405795+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:52.405906+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:52.430199+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:52.443035+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:48:52.513779+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:48:52.515593+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:48:52.523176+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:48:52.555680+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:48:52.563649+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:48:58.504476+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T22:48:58.506653+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:58.506809+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:58.507011+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:58.508532+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:58.516637+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:58.551691+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:58.552781+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:58.553188+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:58.602618+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:58.645030+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T22:48:59.081445+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T22:48:59.183909+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:48:59.185426+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:59.185562+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.185711+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.186819+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.194383+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:59.195850+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.196134+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.196247+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.224063+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:59.236294+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:48:59.306827+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T22:48:59.308355+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:59.308520+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.308720+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.309866+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.316912+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:59.318520+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.318831+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.318941+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.340727+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:59.346576+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T22:48:59.352949+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T22:48:59.421292+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T22:48:59.422821+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:59.422949+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.423088+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.424195+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.430754+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:59.432230+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.432519+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.432626+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.455000+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:59.539539+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T22:48:59.644122+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:48:59.645963+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:48:59.652608+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:48:59.665232+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:48:59.673331+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:48:59.753920+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T22:48:59.755478+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:48:59.755610+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.755754+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.756913+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.763938+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:48:59.773124+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.773596+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.773764+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:48:59.808617+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T22:48:59.811449+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T22:48:59.825657+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T22:49:02.892895+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T22:49:02.894643+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:02.894772+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:02.894913+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:02.896305+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:02.904538+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:02.906531+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:02.906853+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:02.906966+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:02.957037+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:02.960273+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T22:49:02.974989+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T22:49:03.067393+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:49:03.069098+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:03.069228+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:03.069369+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:03.070500+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:03.079055+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:03.090844+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:03.091282+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:03.091516+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:03.124770+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:03.136992+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:49:03.213394+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T22:49:03.214894+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:03.215032+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:03.215175+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:03.216331+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:03.223416+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:03.224911+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:03.225178+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:03.225291+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:03.249397+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:03.256430+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T22:49:03.262349+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T22:49:08.351771+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T22:49:08.353730+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:08.353876+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:08.354025+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:08.355313+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:08.363653+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:08.459560+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:08.460608+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:08.461019+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:08.516963+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:08.666373+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T22:49:08.705899+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T22:49:08.779102+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:49:08.780623+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:08.780751+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:08.780890+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:08.781982+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:08.788875+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:08.824958+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:08.826946+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:08.827447+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:08.880558+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:08.893068+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:49:08.969119+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T22:49:08.970635+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:08.970763+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:08.970903+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:08.972006+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.030585+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:09.035944+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.037642+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.038252+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.073957+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:09.080229+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T22:49:09.086103+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T22:49:09.157905+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T22:49:09.159366+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:09.159493+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.159632+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.160782+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.168164+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:09.169733+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.169991+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.170103+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.193454+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:09.196832+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T22:49:09.268511+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:49:09.270374+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:49:09.277728+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:49:09.279562+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:49:09.288143+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:49:09.344992+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T22:49:09.346471+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:09.346600+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.346738+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.347882+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.355896+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:09.357691+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.357951+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.358063+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:09.391592+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:09.394404+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T22:49:09.423616+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T22:49:18.177061+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T22:49:18.178990+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:18.179129+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.179277+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.180510+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.188058+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:18.197817+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.198162+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.198282+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.237434+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:18.240208+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T22:49:18.255205+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T22:49:18.342199+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:49:18.343805+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:18.343970+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.344154+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.345311+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.351882+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:18.367507+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.367798+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.367914+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.397239+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:18.409755+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:49:18.484639+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T22:49:18.486050+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:18.486183+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.486325+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.487453+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.522647+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:18.549926+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.550896+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.551294+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.594631+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:18.602779+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T22:49:18.608541+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T22:49:18.681858+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T22:49:18.683358+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:18.683486+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.683625+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.684737+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.691628+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:18.693017+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.693300+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.693412+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.715874+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:18.718517+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T22:49:18.818518+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:49:18.820371+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:49:18.826933+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:49:18.828147+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:49:18.835871+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:49:18.892679+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T22:49:18.894186+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:18.894314+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.894454+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.895555+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.903278+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:18.904639+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.904896+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.905006+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:18.937554+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:18.941059+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T22:49:18.954604+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T22:49:22.290914+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:49:22.292679+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:22.292817+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:22.292964+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:22.294182+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:22.301974+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:22.303244+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:22.303508+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:22.303619+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:22.333864+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:22.346048+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:49:22.420694+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:49:22.422193+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:49:22.422321+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:22.422460+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:22.423553+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:22.431101+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:49:22.446956+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:22.447330+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:22.447444+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:49:22.471596+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:49:22.549521+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:49:22.622962+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:49:22.624782+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:49:22.632753+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:49:22.650482+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:49:22.658431+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:52:19.311180+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:52:19.313415+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:52:19.313556+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:52:19.313709+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:52:19.315428+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:52:19.327107+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:52:19.363541+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:52:19.363807+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:52:19.363909+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:52:19.396285+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:52:19.409043+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:52:19.478572+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:52:19.480266+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:52:19.480406+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:52:19.480555+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:52:19.481636+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:52:19.487963+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:52:19.526598+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:52:19.526885+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:52:19.526985+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:52:19.549743+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:52:19.560347+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:53:48.581394+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"depot"},"request_uri":"https://127.0.0.1:8000/depot","method":"GET"} []
[2020-07-07T22:53:48.583401+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:53:48.629165+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:53:48.640644+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:53:48.653132+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:53:50.287225+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:53:50.288951+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:53:50.289135+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:53:50.289361+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:53:50.291056+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:53:50.300051+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:53:50.374215+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:53:50.374461+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:53:50.374556+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:53:50.406055+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:53:50.424315+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:53:50.504663+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:53:50.506182+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:53:50.506345+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:53:50.506485+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:53:50.507547+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:53:50.513495+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:53:50.515005+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:53:50.515227+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:53:50.515320+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:53:50.538717+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:53:50.549461+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:53:50.636736+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"007964"},"request_uri":"https://127.0.0.1:8000/_wdt/007964","method":"GET"} []
[2020-07-07T22:53:50.776234+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:53:50.778115+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:53:50.784370+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:53:50.785725+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:53:50.793380+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:54:01.930554+00:00] request.INFO: Matched route "api_depots_post_collection". {"route":"api_depots_post_collection","route_parameters":{"_route":"api_depots_post_collection","_controller":"api_platform.action.post_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"post"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"POST"} []
[2020-07-07T22:54:01.932144+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:54:01.932351+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:01.932581+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:01.934134+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:01.964227+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:54:02.014271+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.014577+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.014682+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.144857+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, p0_.fournisseur_id AS fournisseur_id_10, p0_.categorie_id AS categorie_id_11 FROM produit p0_ WHERE p0_.id = ? [1] []
[2020-07-07T22:54:02.163685+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:54:02.164210+00:00] doctrine.DEBUG: INSERT INTO depot (stock_initial, quantite_deposee, total_stock_apres_depot, quantite_vendue, stock_final, created_at, updated_at, produit_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":0,"2":0,"3":0,"4":0,"5":0,"6":"2020-07-07T22:54:02+00:00","7":"2020-07-07T22:54:02+00:00","8":1} []
[2020-07-07T22:54:02.164620+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T22:54:02.285833+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.stock_initial AS stock_initial_2, t0.quantite_deposee AS quantite_deposee_3, t0.total_stock_apres_depot AS total_stock_apres_depot_4, t0.quantite_vendue AS quantite_vendue_5, t0.stock_final AS stock_final_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.produit_id AS produit_id_9 FROM depot t0 WHERE t0.id = ? [3] []
[2020-07-07T22:54:02.551540+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-07T22:54:02.572051+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-07T22:54:02.680535+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:54:02.682068+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:54:02.682200+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.682339+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.683442+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.690369+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:54:02.691754+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.692003+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.692113+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.720601+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:54:02.733765+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:54:02.803666+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:54:02.805184+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:54:02.805313+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.805452+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.806553+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.813736+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:54:02.830327+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.831281+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.831546+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:02.864546+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:54:02.877427+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:54:04.338097+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:54:04.339858+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:54:04.339991+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:04.340136+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:04.341424+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:04.349561+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:54:04.372852+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:04.374192+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:04.374790+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:04.431407+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:54:04.446681+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:54:04.542548+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:54:04.544183+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:54:04.544327+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:04.544475+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:04.545616+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:04.577791+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:54:04.638637+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:04.639591+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:04.639991+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:04.688946+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:54:04.701185+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:54:06.055939+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"depot"},"request_uri":"https://127.0.0.1:8000/depot","method":"GET"} []
[2020-07-07T22:54:06.058137+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:54:06.065924+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:54:06.068006+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:54:06.076300+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:54:07.167567+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T22:54:07.169229+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:54:07.169359+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:07.169500+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:07.170664+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:07.178485+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:54:07.179875+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:07.180140+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:07.180260+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:07.206393+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T22:54:07.222404+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T22:54:07.297198+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T22:54:07.298674+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:54:07.298802+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:07.298942+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:07.300008+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:07.306323+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:54:07.307668+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:07.307902+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:07.308018+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:07.334109+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T22:54:07.346287+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T22:54:07.639452+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"ff1e7b"},"request_uri":"https://127.0.0.1:8000/_wdt/ff1e7b","method":"GET"} []
[2020-07-07T22:54:07.900155+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T22:54:07.902049+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T22:54:07.909290+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T22:54:08.016056+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T22:54:08.038247+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T22:54:18.872933+00:00] request.INFO: Matched route "api_depots_delete_item". {"route":"api_depots_delete_item","route_parameters":{"_route":"api_depots_delete_item","_controller":"api_platform.action.delete_item","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_item_operation_name":"delete","id":"3"},"request_uri":"https://127.0.0.1:8000/api/depots/3","method":"DELETE"} []
[2020-07-07T22:54:18.874358+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T22:54:18.874487+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:18.874627+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:18.875817+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:18.884522+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T22:54:18.885697+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:18.885963+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:18.886074+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T22:54:18.908640+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id WHERE d0_.id = ? [3] []
[2020-07-07T22:54:18.921232+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T22:54:18.921632+00:00] doctrine.DEBUG: DELETE FROM depot WHERE id = ? [3] []
[2020-07-07T22:54:18.922070+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T23:00:23.147914+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"depot"},"request_uri":"https://127.0.0.1:8000/depot","method":"GET"} []
[2020-07-07T23:00:23.353233+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:00:24.749968+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:00:24.924725+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:00:25.363822+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:00:32.889668+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:00:33.086651+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:00:33.086818+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:33.086984+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:33.599512+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:33.636212+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:00:33.637467+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:33.657324+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:33.657439+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:35.137402+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:00:35.789629+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:00:36.129499+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T23:00:36.131241+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:00:36.131375+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:36.131519+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:36.132910+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:36.144008+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:00:36.171879+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:36.172920+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:36.173320+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:36.314054+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T23:00:36.472802+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T23:00:36.725197+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"00b533"},"request_uri":"https://127.0.0.1:8000/_wdt/00b533","method":"GET"} []
[2020-07-07T23:00:37.075486+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:00:37.077446+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:00:37.084313+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:00:37.085267+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:00:37.092372+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:00:42.507763+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:00:42.509458+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:00:42.509585+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:42.509718+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:42.510866+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:42.517965+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:00:42.519626+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:42.519958+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:42.520066+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:42.551132+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:00:42.563103+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:00:42.645849+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T23:00:42.647270+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:00:42.647392+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:42.647523+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:42.648636+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:42.655137+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:00:42.656236+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:42.656488+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:42.656593+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:00:42.678873+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T23:00:42.689176+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T23:04:50.092395+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"depot"},"request_uri":"https://127.0.0.1:8000/depot","method":"GET"} []
[2020-07-07T23:04:50.256806+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:04:50.282329+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:04:50.302670+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:04:50.324533+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:04:52.563266+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:04:52.564912+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:04:52.565070+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:52.565216+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:52.575839+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:52.582525+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:04:52.584072+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:52.584348+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:52.584452+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:52.613131+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:04:52.624359+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:04:53.016940+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T23:04:53.019452+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:04:53.019665+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:53.019898+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:53.021748+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:53.033015+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:04:53.056379+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:53.056859+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:53.057056+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:53.091912+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T23:04:53.106839+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T23:04:53.188973+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"55dfe1"},"request_uri":"https://127.0.0.1:8000/_wdt/55dfe1","method":"GET"} []
[2020-07-07T23:04:53.231579+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:04:53.233928+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:04:53.243922+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:04:53.245188+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:04:53.254370+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:04:57.143689+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:04:57.145390+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:04:57.145537+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:57.145677+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:57.146921+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:57.156745+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:04:57.157853+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:57.158119+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:57.158232+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:57.187983+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:04:57.199241+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:04:57.266419+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T23:04:57.268507+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:04:57.268642+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:57.268777+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:57.269827+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:57.276004+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:04:57.277053+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:57.277305+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:57.277408+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:04:57.300392+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T23:04:57.312265+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T23:20:48.476698+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"depot"},"request_uri":"https://127.0.0.1:8000/depot","method":"GET"} []
[2020-07-07T23:20:48.515722+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:20:48.562297+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:20:48.567350+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:20:48.602712+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:20:50.246416+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T23:20:50.248147+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:20:50.248300+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:20:50.248445+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:20:50.249742+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:20:50.258603+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:20:50.261276+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:20:50.261855+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:20:50.262146+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:20:50.292867+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T23:20:50.306773+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T23:20:50.615070+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:20:50.616711+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:20:50.616847+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:20:50.616986+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:20:50.618139+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:20:50.624946+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:20:50.637681+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:20:50.637959+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:20:50.638066+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:20:50.667347+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:20:50.687149+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:20:50.925224+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"e97025"},"request_uri":"https://127.0.0.1:8000/_wdt/e97025","method":"GET"} []
[2020-07-07T23:20:50.970299+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:20:50.972395+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:20:50.979204+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:20:50.988005+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:20:50.997712+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:21:12.443260+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T23:21:12.727627+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:21:12.728151+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:12.728740+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:12.733655+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:12.753716+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:21:12.756227+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:12.756816+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:12.756982+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:13.317023+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T23:21:13.642064+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T23:21:14.656710+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T23:21:14.764741+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:21:14.766310+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:21:14.766440+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:14.766581+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:14.767701+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:14.775258+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:21:14.776694+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:14.776954+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:14.777067+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:14.805313+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:21:14.817169+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:21:15.207872+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T23:21:15.209691+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:21:15.209847+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.210001+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.211431+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.219381+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:21:15.220799+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.221072+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.221188+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.245785+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T23:21:15.291750+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T23:21:15.314560+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T23:21:15.591332+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T23:21:15.593234+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:21:15.593393+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.593563+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.595105+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.602500+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:21:15.604202+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.604594+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.604705+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.650802+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T23:21:15.677439+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T23:21:15.872718+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:21:15.874585+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:21:15.883577+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:21:15.884894+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:21:15.892628+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:21:15.975587+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T23:21:15.977061+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:21:15.977188+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.977326+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.978420+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.986241+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:21:15.987388+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.987647+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:15.987763+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:21:16.021643+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T23:21:16.284491+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T23:21:16.351076+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T23:33:30.267029+00:00] request.INFO: Matched route "api_users_GET_collection". {"route":"api_users_GET_collection","route_parameters":{"_route":"api_users_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/users","method":"GET"} []
[2020-07-07T23:33:30.268760+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:33:30.268903+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:30.269055+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:30.270425+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:30.279861+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:33:30.281523+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:30.281814+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:30.281933+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:30.846049+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ORDER BY u0_.id ASC LIMIT 30 ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T23:33:31.176910+00:00] doctrine.DEBUG: SELECT count(u0_.id) AS sclr_0 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T23:33:31.379623+00:00] request.INFO: Matched route "api_users_total_user_collection". {"route":"api_users_total_user_collection","route_parameters":{"_route":"api_users_total_user_collection","_controller":"App\\Controller\\CountUserController","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"total_user"},"request_uri":"https://127.0.0.1:8000/api/totaluser","method":"GET"} []
[2020-07-07T23:33:31.381273+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:33:31.381425+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:31.381577+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:31.382821+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:31.390383+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:33:31.391723+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:31.392004+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:31.392134+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:31.544594+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T23:33:31.553864+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",true] []
[2020-07-07T23:33:31.557831+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",false] []
[2020-07-07T23:33:31.889180+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:33:31.893339+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:33:31.902374+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:33:31.903467+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:33:31.912637+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:33:41.966656+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-07T23:33:41.968184+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:33:41.968331+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:41.968478+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:41.969690+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:41.981078+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:33:41.982442+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:41.982755+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:41.982890+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:42.294825+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-07T23:33:42.615574+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:33:42.619394+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:33:42.630359+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:33:42.632085+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:33:42.643942+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:33:48.564113+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T23:33:48.565940+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:33:48.566074+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.566218+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.567436+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.577290+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:33:48.578439+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.578702+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.578812+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.617363+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T23:33:48.620238+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T23:33:48.635426+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T23:33:48.727618+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:33:48.729570+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:33:48.729710+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.729856+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.731017+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.751682+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:33:48.753075+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.753343+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.753474+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.782840+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:33:48.796528+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:33:48.877803+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:33:48.879828+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:33:48.886549+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:33:48.887778+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:33:48.896560+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:33:48.955043+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T23:33:48.956556+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:33:48.956708+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.956852+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.958036+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.966365+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:33:48.967507+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.967796+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.967986+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:48.992266+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T23:33:48.995203+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T23:33:49.070752+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T23:33:49.072410+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:33:49.072603+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:49.072757+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:49.073889+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:49.081152+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:33:49.082182+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:49.082473+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:49.082583+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:49.106306+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T23:33:49.112830+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T23:33:49.119404+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T23:33:49.204414+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T23:33:49.207196+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:33:49.207441+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:49.207718+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:49.209833+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:49.217803+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:33:49.218873+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:49.219126+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:49.219233+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:33:49.253577+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T23:33:49.277751+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T23:33:49.292966+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T23:34:03.435274+00:00] request.INFO: Matched route "api_users_total_user_collection". {"route":"api_users_total_user_collection","route_parameters":{"_route":"api_users_total_user_collection","_controller":"App\\Controller\\CountUserController","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"total_user"},"request_uri":"https://127.0.0.1:8000/api/totaluser","method":"GET"} []
[2020-07-07T23:34:03.436904+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:34:03.437039+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:03.437186+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:03.438401+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:03.447254+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:34:03.448474+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:03.448753+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:03.448878+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:03.457308+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T23:34:03.460461+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",true] []
[2020-07-07T23:34:03.461653+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? AND u0_.is_activated = ? ["%ROLE_SUPER_ADMIN%",false] []
[2020-07-07T23:34:03.539478+00:00] request.INFO: Matched route "api_users_GET_collection". {"route":"api_users_GET_collection","route_parameters":{"_route":"api_users_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\User","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/users","method":"GET"} []
[2020-07-07T23:34:03.540857+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:34:03.540987+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:03.541127+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:03.542244+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:03.549812+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:34:03.551310+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:03.551674+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:03.551813+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:03.577618+00:00] doctrine.DEBUG: SELECT u0_.id AS id_0, u0_.email AS email_1, u0_.roles AS roles_2, u0_.password AS password_3, u0_.name AS name_4, u0_.phone AS phone_5, u0_.is_activated AS is_activated_6, u0_.created_at AS created_at_7, u0_.updated_at AS updated_at_8 FROM user u0_ WHERE u0_.roles NOT LIKE ? ORDER BY u0_.id ASC LIMIT 30 ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T23:34:03.582180+00:00] doctrine.DEBUG: SELECT count(u0_.id) AS sclr_0 FROM user u0_ WHERE u0_.roles NOT LIKE ? ["%ROLE_SUPER_ADMIN%"] []
[2020-07-07T23:34:03.662185+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:34:03.664325+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:34:03.672541+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:34:03.673661+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:34:03.681409+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:34:19.726091+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T23:34:19.728180+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:34:19.728425+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:19.728653+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:19.730062+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:19.738153+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:34:19.739641+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:19.739960+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:19.740083+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:19.778602+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T23:34:19.781533+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T23:34:19.796952+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T23:34:19.874449+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:34:19.876033+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:34:19.876162+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:19.876329+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:19.877966+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:19.885093+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:34:19.886244+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:19.886499+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:19.886610+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:19.915987+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:34:19.928925+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:34:20.053154+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T23:34:20.055191+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:34:20.055337+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.055545+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.056732+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.063477+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:34:20.064523+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.064769+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.064922+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.087877+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T23:34:20.095063+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T23:34:20.101120+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T23:34:20.176692+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T23:34:20.178668+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:34:20.178809+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.178952+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.180155+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.187196+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:34:20.188203+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.188474+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.188584+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.212231+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T23:34:20.215154+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T23:34:20.368874+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:34:20.370904+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:34:20.378530+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:34:20.379499+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:34:20.387675+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:34:20.448027+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T23:34:20.449565+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:34:20.449694+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.449833+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.451055+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.458395+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:34:20.459427+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.459682+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.459792+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:20.493333+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T23:34:20.496769+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T23:34:20.511206+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T23:34:50.033315+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-07T23:34:50.034860+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:34:50.034993+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.035138+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.036355+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.044587+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:34:50.060349+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.061350+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.061750+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.198059+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-07T23:34:50.561742+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-07T23:34:50.565269+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-07T23:34:50.703311+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-07T23:34:50.704745+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:34:50.704897+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.705093+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.706530+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.715171+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:34:50.716765+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.717170+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.717347+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.725620+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-07T23:34:50.814249+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-07T23:34:50.815602+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:34:50.815754+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.815904+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.817315+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.824096+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:34:50.852419+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.852748+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.852900+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:50.959132+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-07T23:34:51.086563+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T23:34:51.088213+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:34:51.088357+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:51.088498+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:51.089715+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:51.096793+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:34:51.098667+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:51.099027+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:51.099169+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:34:51.125135+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T23:34:51.128166+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T23:34:51.206297+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:34:51.208363+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:34:51.215315+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:34:51.216263+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:34:51.224877+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:35:10.277907+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:35:10.279808+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:35:10.280027+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:10.280275+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:10.281926+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:10.292086+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:35:10.294327+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:10.294710+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:10.294833+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:10.328687+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:35:10.344483+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:35:10.465375+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T23:35:10.466845+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:35:10.466988+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:10.467137+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:10.468359+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:10.475227+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:35:10.476484+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:10.476780+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:10.476893+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:10.499489+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T23:35:10.507528+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T23:35:10.515295+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T23:35:10.611204+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:35:10.613069+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:35:10.620749+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:35:10.621781+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:35:10.629338+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:35:19.608098+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:35:19.609979+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:35:19.610121+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:19.610274+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:19.611991+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:19.620774+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:35:19.637157+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:19.637472+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:19.637589+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:19.672096+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:35:19.691966+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:35:19.853418+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T23:35:19.856325+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:35:19.856630+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:19.856966+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:19.858800+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:19.866596+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:35:19.868193+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:19.868512+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:19.868650+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:35:19.894611+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T23:35:19.900608+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T23:35:19.907060+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T23:36:55.520477+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T23:36:55.522442+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:36:55.522585+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.522734+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.524005+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.531542+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:36:55.533087+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.533790+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.533987+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.572675+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T23:36:55.575791+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T23:36:55.591739+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T23:36:55.668947+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:36:55.670487+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:36:55.670625+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.670766+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.671920+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.678993+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:36:55.680151+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.680455+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.680566+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.711360+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:36:55.724584+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:36:55.804484+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T23:36:55.805893+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:36:55.806046+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.806191+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.807812+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.814918+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:36:55.816004+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.816270+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.816386+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.839447+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T23:36:55.845625+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T23:36:55.852356+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T23:36:55.942529+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T23:36:55.944534+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:36:55.944697+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.944847+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.946057+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.953048+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:36:55.954258+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.954520+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.954630+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:55.979854+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T23:36:55.983277+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T23:36:56.065533+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:36:56.067418+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:36:56.074289+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:36:56.075198+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:36:56.083105+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:36:56.163253+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T23:36:56.164834+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:36:56.164984+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:56.165157+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:56.166429+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:56.173632+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:36:56.174940+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:56.175362+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:56.175573+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:36:56.210178+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T23:36:56.213151+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T23:36:56.226225+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T23:37:03.096175+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T23:37:03.099205+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:37:03.099369+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.099530+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.100998+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.109222+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:37:03.110358+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.110655+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.110771+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.151608+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T23:37:03.154588+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T23:37:03.170529+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T23:37:03.322676+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:37:03.324354+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:37:03.324506+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.324678+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.325917+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.332743+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:37:03.333808+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.334062+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.334172+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.367032+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:37:03.411700+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:37:03.489025+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T23:37:03.490677+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:37:03.490808+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.490950+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.492193+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.498996+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:37:03.500245+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.500565+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.500700+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.523607+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T23:37:03.529798+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T23:37:03.536528+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T23:37:03.629381+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T23:37:03.631096+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:37:03.631278+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.631429+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.632700+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.639602+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:37:03.640981+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.641254+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.641376+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.665920+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T23:37:03.668858+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T23:37:03.764478+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:37:03.766376+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:37:03.773400+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:37:03.774376+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:37:03.782633+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:37:03.866570+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T23:37:03.868462+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:37:03.868623+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.868783+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.869927+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.876888+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:37:03.877955+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.878225+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.878336+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:03.913234+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T23:37:03.916603+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T23:37:03.930918+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T23:37:39.965940+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T23:37:39.967664+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:37:39.967794+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:39.967935+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:39.969259+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:39.978644+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:37:39.979801+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:39.980078+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:39.980193+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:40.011072+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T23:37:40.019642+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T23:37:40.026679+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T23:37:40.102556+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:37:40.104110+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:37:40.104241+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:40.104401+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:40.105524+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:40.114011+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:37:40.115431+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:40.115826+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:40.115997+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:37:40.146924+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:37:40.158944+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:37:40.280512+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:37:40.282371+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:37:40.289627+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:37:40.290927+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:37:40.298853+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:38:00.482640+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:38:00.484920+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:00.485079+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:00.485268+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:00.486822+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:00.503264+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:00.504891+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:00.505174+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:00.505291+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:00.540149+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:38:00.553185+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:38:00.660884+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-07T23:38:00.663425+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:00.663631+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:00.663787+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:00.664990+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:00.672314+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:00.673940+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:00.674201+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:00.674311+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:00.701166+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-07T23:38:00.714357+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-07T23:38:00.790542+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:38:00.792424+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:38:00.799905+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:38:00.801143+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:38:00.809242+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:38:03.553024+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T23:38:03.555045+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:03.555260+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.555415+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.557165+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.566820+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:03.568663+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.569135+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.569292+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.612472+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T23:38:03.615371+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T23:38:03.632481+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T23:38:03.718634+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:38:03.720592+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:03.720733+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.720877+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.722500+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.730256+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:03.731635+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.731901+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.732012+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.770272+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:38:03.783080+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:38:03.860874+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T23:38:03.862487+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:03.862641+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.862793+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.864017+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.870770+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:03.871929+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.872298+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.872477+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.896659+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T23:38:03.902839+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T23:38:03.909718+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T23:38:03.985380+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T23:38:03.986968+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:03.987100+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.987242+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.988354+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:03.997950+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:04.005233+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:04.005666+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:04.005841+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:04.032165+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T23:38:04.036025+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T23:38:04.117938+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:38:04.119958+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:38:04.127827+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:38:04.128776+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:38:04.136618+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:38:04.217775+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T23:38:04.219290+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:04.219443+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:04.219625+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:04.220768+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:04.228325+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:04.230051+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:04.230327+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:04.230485+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:04.266360+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T23:38:04.308780+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1]] []
[2020-07-07T23:38:04.342254+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T23:38:06.219003+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:38:06.220774+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:06.220923+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:06.221072+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:06.222312+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:06.231532+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:06.254343+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:06.254757+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:06.254890+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:06.288705+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:38:06.321849+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:38:06.399734+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T23:38:06.401255+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:06.401393+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:06.401535+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:06.402664+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:06.409700+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:06.438682+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:06.438986+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:06.439111+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:06.463535+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T23:38:06.469496+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T23:38:06.475535+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T23:38:06.565844+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:38:06.567993+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:38:06.575515+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:38:06.576654+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:38:06.584658+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:38:39.225781+00:00] request.INFO: Matched route "api_ventes_post_collection". {"route":"api_ventes_post_collection","route_parameters":{"_route":"api_ventes_post_collection","_controller":"api_platform.action.post_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"post"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"POST"} []
[2020-07-07T23:38:39.227753+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:39.227933+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:39.228130+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:39.229880+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:39.239523+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:39.258219+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:39.258547+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:39.258682+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:39.707729+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.nom_complet AS nom_complet_2, t0.telephone AS telephone_3, t0.adresse AS adresse_4, t0.created_at AS created_at_5, t0.updated_at AS updated_at_6 FROM client t0 WHERE t0.id = ? [1] []
[2020-07-07T23:38:39.711447+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 WHERE t0.id = ? [1] []
[2020-07-07T23:38:39.768098+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.stock_initial AS stock_initial_2, t0.quantite_deposee AS quantite_deposee_3, t0.total_stock_apres_depot AS total_stock_apres_depot_4, t0.quantite_vendue AS quantite_vendue_5, t0.stock_final AS stock_final_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.produit_id AS produit_id_9 FROM depot t0 WHERE t0.produit_id = ? [1] []
[2020-07-07T23:38:39.966092+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-07T23:38:39.996579+00:00] doctrine.DEBUG: INSERT INTO vente (total_vente, date_vente, type_paiement, montant_verse, montant_rendu, created_at, updated_at, client_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"125","2":"2020-07-07","3":"espece","4":"150","5":"75","6":"2020-07-07T23:38:39+00:00","7":"2020-07-07T23:38:39+00:00","8":1} []
[2020-07-07T23:38:40.134391+00:00] doctrine.DEBUG: INSERT INTO vente_produit (quantite_vendue, prix_vente_total, prix_net_payer, status, commentaire, date_vente, created_at, updated_at, vente_id, produit_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) {"1":1,"2":"125","3":"125","4":null,"5":null,"6":"2020-07-07","7":"2020-07-07T23:38:39+00:00","8":"2020-07-07T23:38:39+00:00","9":2,"10":1} []
[2020-07-07T23:38:40.450019+00:00] doctrine.DEBUG: UPDATE depot SET quantite_vendue = ?, stock_final = ?, updated_at = ? WHERE id = ? [13,11,"2020-07-07T23:38:40+00:00",1] []
[2020-07-07T23:38:40.508058+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-07T23:38:40.713926+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.id = ? [2] []
[2020-07-07T23:38:40.931694+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.quantite_vendue AS quantite_vendue_2, t0.prix_vente_total AS prix_vente_total_3, t0.prix_net_payer AS prix_net_payer_4, t0.status AS status_5, t0.commentaire AS commentaire_6, t0.date_vente AS date_vente_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9, t0.vente_id AS vente_id_10, t0.produit_id AS produit_id_11 FROM vente_produit t0 WHERE t0.vente_id = ? [2] []
[2020-07-07T23:38:41.432025+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-07T23:38:41.466153+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-07T23:38:43.906297+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T23:38:43.908140+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:43.908295+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:43.908448+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:43.909761+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:43.917968+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:43.919399+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:43.919682+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:43.919797+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:43.962214+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T23:38:43.986783+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-07T23:38:44.083875+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-07T23:38:44.286326+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-07T23:38:44.288072+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:44.288215+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.288383+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.289556+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.296540+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:44.298319+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.298586+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.298702+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.328130+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-07T23:38:44.340438+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-07T23:38:44.437934+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-07T23:38:44.439310+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:44.439437+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.439577+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.440709+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.448326+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:44.449599+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.449857+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.449966+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.472870+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-07T23:38:44.479845+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-07T23:38:44.485859+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-07T23:38:44.557508+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-07T23:38:44.558986+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:44.559114+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.559252+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.560415+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.567607+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:44.593099+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.593750+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.594010+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.623866+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-07T23:38:44.626874+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-07T23:38:44.717924+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-07T23:38:44.719697+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-07T23:38:44.726502+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-07T23:38:44.727926+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-07T23:38:44.735937+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-07T23:38:44.797118+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-07T23:38:44.799046+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-07T23:38:44.799186+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.799334+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.800514+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.807670+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-07T23:38:44.808757+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.809010+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.809119+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-07T23:38:44.845658+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-07T23:38:44.880911+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-07T23:38:44.916741+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T10:50:26.283314+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":""},"request_uri":"https://127.0.0.1:8000/","method":"GET"} []
[2020-07-09T10:50:28.352740+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-09T10:50:39.895900+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"33cf48"},"request_uri":"https://127.0.0.1:8000/_wdt/33cf48","method":"GET"} []
[2020-07-09T10:50:40.965177+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T10:50:40.970054+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-09T10:50:53.264547+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"login"},"request_uri":"https://127.0.0.1:8000/login","method":"POST"} []
[2020-07-09T10:50:53.736387+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T10:50:54.465472+00:00] security.INFO: User has been authenticated successfully. {"username":"eldji22@hotmail.fr"} []
[2020-07-09T10:50:54.973432+00:00] doctrine.DEBUG: SELECT t0.refresh_token AS refresh_token_1, t0.username AS username_2, t0.valid AS valid_3, t0.id AS id_4 FROM refresh_tokens t0 WHERE t0.refresh_token = ? ["79de792f1be9c414dbed24e7e8 [...]"] []
[2020-07-09T10:50:55.108629+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-09T10:50:55.125568+00:00] doctrine.DEBUG: INSERT INTO refresh_tokens (refresh_token, username, valid) VALUES (?, ?, ?) {"1":"79de792f1be9c414dbed24e7e8 [...]","2":"eldji22@hotmail.fr","3":"2020-08-08T10:50:54+00:00"} []
[2020-07-09T10:50:55.159482+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-09T10:50:55.249746+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T10:50:55.661367+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-09T10:50:55.737222+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T10:50:55.737605+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:50:55.738018+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:50:55.784439+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:50:55.797880+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T10:50:55.800701+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:50:55.801241+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:50:55.801384+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:50:55.848647+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-09T10:50:56.535596+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T10:50:56.540431+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T10:50:56.555996+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T10:50:56.557793+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T10:50:56.575551+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T10:51:21.509322+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T10:51:21.750114+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T10:51:21.750307+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:21.750459+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:21.751802+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:21.761065+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T10:51:21.762821+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:21.763145+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:21.763278+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:22.746412+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T10:51:23.239202+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T10:51:23.524506+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T10:51:23.701524+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T10:51:23.703435+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T10:51:23.703670+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:23.703855+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:23.705392+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:23.712734+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T10:51:23.713917+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:23.714168+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:23.714382+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:23.749638+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T10:51:23.872205+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T10:51:23.954005+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T10:51:23.955489+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T10:51:23.955695+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:23.955849+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:23.957057+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:23.965718+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T10:51:23.966999+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:23.967266+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:23.967373+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:23.992447+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T10:51:23.997717+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T10:51:24.084059+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T10:51:24.086261+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T10:51:24.086496+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:24.086713+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:24.088314+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:24.096294+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T10:51:24.097495+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:24.097751+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:24.097860+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:24.125921+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T10:51:24.185835+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T10:51:24.208796+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T10:51:24.296034+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T10:51:24.297829+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T10:51:24.305543+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T10:51:24.307317+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T10:51:24.315266+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T10:51:24.382953+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T10:51:24.384754+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T10:51:24.384890+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:24.385036+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:24.386213+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:24.394157+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T10:51:24.395936+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:24.396299+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:24.396477+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:51:24.433985+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T10:51:24.437447+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T10:51:24.456620+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T10:54:13.302989+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-09T10:54:13.305531+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T10:54:13.305701+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:54:13.305877+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:54:13.307459+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:54:13.317103+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T10:54:13.318970+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:54:13.319437+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:54:13.319673+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:54:13.374690+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-09T10:54:13.470126+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T10:54:13.473615+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T10:54:13.483187+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T10:54:13.484552+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T10:54:13.496993+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T10:58:17.279769+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-09T10:58:17.281947+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T10:58:17.282146+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.282380+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.284474+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.293564+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T10:58:17.294859+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.295153+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.295281+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.333459+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-09T10:58:17.386623+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-09T10:58:17.387847+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-09T10:58:17.468674+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-09T10:58:17.471228+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T10:58:17.471419+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.471657+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.473569+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.484866+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T10:58:17.486725+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.487233+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.487479+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.496514+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-09T10:58:17.685330+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-09T10:58:17.686739+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T10:58:17.686870+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.687010+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.688262+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.697503+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T10:58:17.698719+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.698988+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.699104+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.704746+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-09T10:58:17.788727+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T10:58:17.790243+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T10:58:17.790367+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.790503+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.791729+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.801821+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T10:58:17.803150+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.803427+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.803535+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T10:58:17.830230+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T10:58:17.833285+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T10:58:17.921551+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T10:58:17.923934+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T10:58:17.934400+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T10:58:17.935506+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T10:58:17.945725+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:09:01.413966+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:09:01.415835+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:09:01.415968+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:01.416110+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:01.417365+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:01.427963+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:09:01.429252+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:01.429545+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:01.429662+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:01.466779+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:09:01.480563+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:09:01.574093+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-09T11:09:01.576209+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:09:01.576371+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:01.576539+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:01.577948+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:01.588966+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:09:01.590565+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:01.591055+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:01.591362+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:01.626194+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-09T11:09:01.746594+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-09T11:09:01.836694+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:09:01.839369+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:09:01.848872+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:09:01.850168+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:09:01.859940+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:09:22.440655+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-09T11:09:22.442256+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:09:22.442387+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.442523+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.444172+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.453924+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:09:22.455080+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.455340+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.455448+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.473875+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-09T11:09:22.486126+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-09T11:09:22.486889+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-09T11:09:22.566451+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-09T11:09:22.567967+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:09:22.568103+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.568254+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.569536+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.582248+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:09:22.583499+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.583951+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.584083+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.592388+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-09T11:09:22.679731+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-09T11:09:22.681463+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:09:22.681691+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.681992+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.684578+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.694659+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:09:22.696004+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.696367+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.696483+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.702891+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-09T11:09:22.785486+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:09:22.787030+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:09:22.787157+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.787292+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.788501+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.796879+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:09:22.797960+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.798208+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.798315+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:09:22.826519+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:09:22.830417+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:09:22.927396+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:09:22.929685+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:09:22.937043+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:09:22.938309+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:09:22.948325+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:15:20.100811+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"produit"},"request_uri":"https://127.0.0.1:8000/produit","method":"GET"} []
[2020-07-09T11:15:20.103220+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:15:20.115478+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:15:20.116551+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:15:20.126340+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:15:21.582599+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-09T11:15:21.584321+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:15:21.584486+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.584662+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.587140+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.603163+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:15:21.604779+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.605163+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.605297+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.629321+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-09T11:15:21.643761+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-09T11:15:21.644654+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-09T11:15:21.744388+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-09T11:15:21.746518+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:15:21.746731+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.746928+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.748961+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.757621+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:15:21.758812+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.759116+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.759241+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.768069+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-09T11:15:21.852029+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:15:21.853730+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:15:21.853866+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.854013+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.855251+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.864508+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:15:21.866371+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.866842+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.866983+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.895848+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:15:21.899683+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:15:21.995377+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-09T11:15:21.998197+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:15:21.998471+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:21.998772+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:22.000674+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:22.010438+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:15:22.011892+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:22.012205+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:22.012325+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:22.019253+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-09T11:15:22.118424+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"e6bcff"},"request_uri":"https://127.0.0.1:8000/_wdt/e6bcff","method":"GET"} []
[2020-07-09T11:15:22.232202+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:15:22.235159+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:15:22.244801+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:15:22.246267+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:15:22.257919+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:15:26.091665+00:00] request.INFO: Matched route "api_fournisseurs_get_fournisseur_item". {"route":"api_fournisseurs_get_fournisseur_item","route_parameters":{"_route":"api_fournisseurs_get_fournisseur_item","_controller":"App\\Controller\\AccessFournisseur","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_item_operation_name":"get_fournisseur","id":"1"},"request_uri":"https://127.0.0.1:8000/api/access/fournisseurs/1","method":"GET"} []
[2020-07-09T11:15:26.093771+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:15:26.093977+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:26.094151+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:26.096757+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:26.106725+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:15:26.108049+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:26.108389+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:26.108527+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:26.456535+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ WHERE f0_.id = ? [1] []
[2020-07-09T11:15:26.492502+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-09T11:15:26.540490+00:00] doctrine.DEBUG: UPDATE fournisseur SET token_access = ?, token_expire_at = ?, updated_at = ? WHERE id = ? ["3cfca334416a6daa4258907b6d [...]","2020-07-10T11:15:26+00:00","2020-07-09T11:15:26+00:00",1] []
[2020-07-09T11:15:26.542215+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-09T11:15:51.652210+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-09T11:15:51.653841+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:15:51.653984+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:51.654131+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:51.655482+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:51.666837+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:15:51.668017+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:51.668307+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:51.668422+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:15:51.677195+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-09T11:15:51.769474+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:15:51.772692+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:15:51.781845+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:15:51.783070+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:15:51.796260+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:16:02.669062+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-09T11:16:02.670696+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:16:02.670824+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.671005+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.672397+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.682998+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:16:02.684364+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.684665+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.684789+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.703791+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-09T11:16:02.719677+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-09T11:16:02.720707+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-09T11:16:02.810023+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-09T11:16:02.812292+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:16:02.812581+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.812962+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.815765+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.829588+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:16:02.830755+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.831025+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.831140+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.840876+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-09T11:16:02.932606+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-09T11:16:02.934352+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:16:02.934488+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.934636+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.935824+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.944171+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:16:02.946606+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.947100+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.947242+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:02.954241+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-09T11:16:03.039823+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:16:03.041802+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:16:03.041937+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:03.042084+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:03.043288+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:03.050764+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:16:03.051837+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:03.052192+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:03.052365+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:16:03.080248+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:16:03.083245+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:16:03.169692+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:16:03.172092+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:16:03.181015+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:16:03.182163+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:16:03.190791+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:18:04.198271+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:18:04.200062+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:18:04.200194+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:18:04.200337+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:18:04.201708+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:18:04.211918+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:18:04.213398+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:18:04.213701+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:18:04.213821+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:18:04.250070+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:18:04.263657+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:18:04.352062+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-09T11:18:04.353868+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:18:04.354004+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:18:04.354193+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:18:04.355481+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:18:04.364611+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:18:04.366747+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:18:04.367059+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:18:04.367176+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:18:04.401643+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-09T11:18:04.414751+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-09T11:18:04.502022+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:18:04.503879+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:18:04.511332+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:18:04.513194+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:18:04.523054+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:22:24.487399+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:22:24.490733+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:22:24.490964+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.491228+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.495486+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.511860+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:22:24.513987+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.514614+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.514805+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.564327+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:22:24.567537+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:22:24.588359+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:22:24.830222+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:22:24.832037+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:22:24.832203+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.832384+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.833910+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.842094+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:22:24.843274+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.843557+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.843676+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.874328+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:22:24.887076+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:22:24.974961+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:22:24.976727+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:22:24.976949+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.977119+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.978524+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.989113+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:22:24.990381+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.990669+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:24.990789+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:25.018222+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:22:25.026319+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:22:25.033566+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:22:25.304886+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:22:25.307223+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:22:25.307380+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:25.307547+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:25.308739+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:25.318259+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:22:25.319401+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:25.319666+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:25.319829+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:25.350409+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:22:25.353294+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:22:25.440460+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:22:25.443029+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:22:25.449796+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:22:25.451247+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:22:25.460525+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:22:25.531239+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:22:25.532704+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:22:25.532888+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:25.533072+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:25.534439+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:25.542953+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:22:25.544757+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:25.545143+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:25.545294+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:22:25.583834+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:22:25.587109+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:22:25.605077+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:25:21.699272+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"vente"},"request_uri":"https://127.0.0.1:8000/vente","method":"GET"} []
[2020-07-09T11:25:21.702495+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:25:21.712405+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:25:21.713637+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:25:21.723464+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:25:22.933442+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:25:22.936534+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:25:22.936914+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:22.937305+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:22.941080+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:22.954809+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:25:22.956283+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:22.956752+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:22.956958+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.006860+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:25:23.010599+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:25:23.037500+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:25:23.137081+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:25:23.138505+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:25:23.138652+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.138798+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.139991+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.149809+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:25:23.151113+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.151487+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.151640+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.178395+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:25:23.185715+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:25:23.193216+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:25:23.290361+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:25:23.292257+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:25:23.292407+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.292555+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.294045+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.302763+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:25:23.304236+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.304510+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.304742+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.342125+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:25:23.357261+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:25:23.463031+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:25:23.465967+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:25:23.466256+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.466579+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.469353+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.480406+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:25:23.481669+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.482080+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.482243+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.525123+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:25:23.529967+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:25:23.663490+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"2d97b9"},"request_uri":"https://127.0.0.1:8000/_wdt/2d97b9","method":"GET"} []
[2020-07-09T11:25:23.720544+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:25:23.724294+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:25:23.724669+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.724984+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.726775+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.736626+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:25:23.737985+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.738425+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.738637+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:25:23.783862+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:25:23.786827+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:25:23.807392+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:25:23.908238+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:25:23.910329+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:25:23.919515+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:25:23.920918+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:25:23.931965+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:26:51.015499+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-09T11:26:51.017906+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:26:51.018141+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.018405+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.020794+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.032498+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:26:51.034062+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.034475+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.034589+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.054189+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-09T11:26:51.070572+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-09T11:26:51.071845+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-09T11:26:51.179135+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-09T11:26:51.182043+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:26:51.182303+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.182631+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.185135+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.196486+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:26:51.197842+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.198107+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.198218+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.206595+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-09T11:26:51.291413+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-09T11:26:51.293245+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:26:51.293393+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.293547+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.294822+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.303542+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:26:51.304703+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.305042+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.305148+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.310533+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-09T11:26:51.414495+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:26:51.416169+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:26:51.416294+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.416431+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.417675+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.427604+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:26:51.429094+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.429412+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.429528+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:51.460030+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:26:51.463749+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:26:51.552045+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:26:51.554559+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:26:51.561869+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:26:51.562817+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:26:51.572945+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:26:57.673546+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-09T11:26:57.675088+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:26:57.675214+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:57.675351+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:57.676576+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:57.687316+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:26:57.688556+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:57.688934+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:57.689080+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:26:57.700292+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-09T11:26:57.786006+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:26:57.788277+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:26:57.795924+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:26:57.798059+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:26:57.810717+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:27:49.157806+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:27:49.159789+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:27:49.159959+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.160233+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.161797+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.174163+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:27:49.176362+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.176977+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.177263+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.224593+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:27:49.229756+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:27:49.251078+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:27:49.345282+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:27:49.346904+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:27:49.347029+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.347166+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.348416+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.358155+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:27:49.359609+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.359961+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.360092+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.393086+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:27:49.408221+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:27:49.495086+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:27:49.496985+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:27:49.497205+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.497446+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.499495+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.508407+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:27:49.509898+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.510185+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.510293+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.535920+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:27:49.542284+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:27:49.548015+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:27:49.635709+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:27:49.637626+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:27:49.637755+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.637892+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.639230+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.649535+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:27:49.650791+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.651083+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.651201+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.677117+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:27:49.680881+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:27:49.768582+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:27:49.771737+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:27:49.780438+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:27:49.781442+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:27:49.789277+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:27:49.857809+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:27:49.859368+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:27:49.859552+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.859695+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.861124+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.869748+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:27:49.871090+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.871372+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.871484+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:27:49.911644+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:27:49.914608+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:27:49.932854+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:28:19.123415+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-09T11:28:19.125369+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:28:19.125507+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.125664+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.127056+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.135143+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:28:19.136311+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.136684+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.136795+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.157727+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-09T11:28:19.173426+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-09T11:28:19.174442+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-09T11:28:19.272497+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-09T11:28:19.274437+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:28:19.274634+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.274830+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.276346+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.287216+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:28:19.289417+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.289836+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.289978+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.299487+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-09T11:28:19.384429+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-09T11:28:19.386006+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:28:19.386187+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.386338+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.387420+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.396557+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:28:19.398249+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.398560+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.398678+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.404038+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-09T11:28:19.498809+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:28:19.501138+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:28:19.501500+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.501880+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.504384+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.511427+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:28:19.512475+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.512727+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.512948+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:28:19.541252+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:28:19.544248+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:28:19.631339+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:28:19.633453+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:28:19.640892+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:28:19.641820+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:28:19.650646+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:41:50.348558+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:41:50.350918+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:41:50.351065+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.351218+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.352692+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.365294+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:41:50.367810+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.368225+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.368387+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.416205+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:41:50.420328+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:41:50.440341+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:41:50.533898+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:41:50.535432+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:41:50.535557+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.535693+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.537058+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.545113+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:41:50.547092+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.547445+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.547584+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.579332+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:41:50.593755+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:41:50.681728+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:41:50.683646+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:41:50.683797+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.683940+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.685199+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.693800+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:41:50.695576+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.695983+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.696120+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.722989+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:41:50.732135+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:41:50.741022+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:41:50.838676+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:41:50.840374+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:41:50.840515+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.840654+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.841958+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.849819+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:41:50.852171+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.853420+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.853730+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:50.884755+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:41:50.889685+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:41:50.974384+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:41:50.976761+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:41:50.986296+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:41:50.987562+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:41:50.995410+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:41:51.062984+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:41:51.064494+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:41:51.064617+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:51.064753+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:51.066033+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:51.075194+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:41:51.076266+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:51.076533+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:51.076647+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:51.117259+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:41:51.120247+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:41:51.141617+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:41:52.544178+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:41:52.548223+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:41:52.548470+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.548684+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.550597+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.563957+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:41:52.566334+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.566737+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.566897+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.615513+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:41:52.618385+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:41:52.637921+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:41:52.753886+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:41:52.755513+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:41:52.755646+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.755790+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.757146+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.764986+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:41:52.766449+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.766792+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.766933+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.806215+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:41:52.819636+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:41:52.909070+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:41:52.910498+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:41:52.910623+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.910761+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.912462+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.922006+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:41:52.923208+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.923651+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.923790+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:52.948874+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:41:52.956409+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:41:52.962382+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:41:59.152273+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:41:59.154243+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:41:59.154376+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:59.154517+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:59.155703+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:59.166110+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:41:59.167388+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:59.167713+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:59.167836+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:59.204498+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:41:59.219167+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:41:59.305823+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:41:59.308331+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:41:59.317990+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:41:59.319169+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:41:59.329747+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:41:59.514262+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:41:59.516194+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:41:59.516389+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:59.516548+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:59.517930+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:59.526118+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:41:59.527378+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:59.527636+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:59.527748+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:41:59.562712+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:41:59.577899+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:42:03.749083+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:42:03.752187+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:42:03.752464+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:03.752639+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:03.754164+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:03.766867+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:42:03.768284+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:03.768658+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:03.768936+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:03.814340+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:42:03.817982+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:42:03.840455+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:42:03.931303+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:42:03.933315+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:42:03.933442+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:03.933580+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:03.934674+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:03.942634+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:42:03.944572+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:03.945039+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:03.945156+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:03.977427+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:42:03.992623+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:42:04.082431+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:42:04.083969+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:42:04.084150+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.084293+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.085519+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.095050+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:42:04.096187+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.096436+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.096555+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.121348+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:42:04.129659+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:42:04.135636+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:42:04.223183+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:42:04.225390+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:42:04.225552+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.225722+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.226915+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.235825+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:42:04.237132+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.237401+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.237516+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.263191+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:42:04.267290+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:42:04.355520+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:42:04.358676+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:42:04.366358+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:42:04.367279+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:42:04.377253+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:42:04.444245+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:42:04.445864+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:42:04.445995+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.446137+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.447384+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.456229+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:42:04.457849+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.458155+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.458267+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:04.495027+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:42:04.497908+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:42:04.517476+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:42:05.797767+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:42:05.799842+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:42:05.800107+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:05.800346+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:05.802637+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:05.811867+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:42:05.813290+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:05.813578+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:05.813739+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:05.855786+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:42:05.858948+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:42:05.877834+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:42:05.965668+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:42:05.967198+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:42:05.967333+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:05.967480+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:05.968656+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:05.976015+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:42:05.977335+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:05.977742+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:05.978003+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.003209+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:42:06.011457+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:42:06.021529+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:42:06.110493+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:42:06.112470+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:42:06.112618+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.112779+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.114109+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.122443+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:42:06.124747+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.125245+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.125400+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.165584+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:42:06.180280+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:42:06.266618+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:42:06.268995+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:42:06.269253+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.269563+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.271613+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.279985+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:42:06.281155+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.281406+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.281513+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.310427+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:42:06.313098+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:42:06.401712+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:42:06.403803+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:42:06.410813+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:42:06.412475+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:42:06.421253+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:42:06.493472+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:42:06.495129+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:42:06.495257+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.495393+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.496630+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.506017+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:42:06.507239+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.507512+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.507628+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:42:06.546826+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:42:06.549758+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:42:06.568197+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:43:33.744876+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:43:33.747745+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:43:33.747972+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:33.748234+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:33.750017+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:33.758709+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:43:33.760253+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:33.760650+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:33.760765+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:33.805359+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:43:33.808241+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:43:33.827396+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:43:33.914595+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:43:33.917215+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:43:33.917369+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:33.917530+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:33.918872+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:33.926111+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:43:33.927201+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:33.927496+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:33.927603+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:33.959580+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:43:33.974072+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:43:34.059557+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:43:34.061833+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:43:34.062001+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.062170+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.063848+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.071151+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:43:34.072222+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.072615+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.072789+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.103135+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:43:34.109326+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:43:34.117369+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:43:34.205029+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:43:34.207970+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:43:34.208277+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.208528+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.210570+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.218156+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:43:34.219561+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.219988+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.220126+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.246957+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:43:34.249717+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:43:34.335767+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:43:34.338806+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:43:34.347678+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:43:34.349098+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:43:34.358988+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:43:34.429661+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:43:34.431137+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:43:34.431261+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.431398+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.432555+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.440451+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:43:34.442703+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.443299+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.443510+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:34.482827+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:43:34.486320+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:43:34.505038+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:43:38.293199+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:43:38.295035+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:43:38.295179+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.295315+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.296617+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.306084+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:43:38.307248+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.307549+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.307701+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.352727+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:43:38.357799+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:43:38.377023+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:43:38.466608+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:43:38.468147+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:43:38.468281+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.468434+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.469695+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.479101+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:43:38.480777+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.481162+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.481292+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.505842+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:43:38.516746+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:43:38.523251+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:43:38.609965+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:43:38.611653+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:43:38.611789+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.611980+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.613263+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.620520+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:43:38.621806+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.622060+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.622168+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.655236+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:43:38.670798+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:43:38.756547+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:43:38.758226+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:43:38.758372+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.758507+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.759597+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.767760+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:43:38.769334+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.769692+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.769819+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.798180+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:43:38.803154+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:43:38.886921+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:43:38.888693+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:43:38.897670+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:43:38.898703+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:43:38.908022+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:43:38.982405+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:43:38.985152+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:43:38.985309+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.985464+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.986741+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.994459+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:43:38.996042+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.996328+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:38.996462+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:43:39.036533+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:43:39.041323+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:43:39.060515+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:48:14.444519+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:48:14.446873+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:48:14.447036+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.447330+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.449122+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.462773+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:48:14.464859+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.465424+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.465679+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.511440+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:48:14.514481+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:48:14.535072+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:48:14.624361+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:48:14.626091+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:48:14.626227+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.626372+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.627527+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.635706+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:48:14.637350+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.637678+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.637821+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.668694+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:48:14.683197+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:48:14.770142+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:48:14.771792+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:48:14.771923+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.772064+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.773443+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.782510+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:48:14.784224+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.784841+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.785073+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.812580+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:48:14.821302+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:48:14.828343+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:48:14.916396+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:48:14.918404+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:48:14.918534+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.918670+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.919868+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.930503+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:48:14.931728+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.932197+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.932350+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:14.959303+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:48:14.963918+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:48:15.060510+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:48:15.063408+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:48:15.072919+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:48:15.074068+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:48:15.083708+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:48:15.155529+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:48:15.157120+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:48:15.157245+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:15.157381+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:15.158483+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:15.166288+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:48:15.167954+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:15.168283+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:15.168458+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:15.205982+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:48:15.209454+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:48:15.227301+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:48:16.592749+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:48:16.595767+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:48:16.596053+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:16.596325+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:16.598101+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:16.606365+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:48:16.607518+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:16.607771+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:16.607912+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:16.642784+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:48:16.659279+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:48:16.749714+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:48:16.751294+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:48:16.751421+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:16.751559+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:16.752654+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:16.761978+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:48:16.763062+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:16.763364+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:16.763481+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:48:16.791300+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:48:16.798836+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:48:16.807027+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:48:16.891688+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:48:16.894234+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:48:16.903351+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:48:16.904277+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:48:16.912758+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:49:08.385934+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:49:08.389734+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:49:08.389976+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:08.390190+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:08.391941+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:08.401611+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:49:08.403836+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:08.404397+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:08.404661+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:08.444636+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:49:08.458006+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:49:08.546778+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:49:08.548259+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:49:08.548395+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:08.548544+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:08.549813+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:08.559776+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:49:08.561227+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:08.561568+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:08.561694+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:08.587680+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:49:08.596513+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:49:08.605705+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:49:08.698972+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:49:08.702004+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:49:08.712308+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:49:08.713395+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:49:08.726026+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:49:13.706098+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:49:13.708532+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:49:13.708702+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:13.708894+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:13.710229+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:13.718315+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:49:13.719602+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:13.719878+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:13.720031+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:13.758659+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:49:13.780047+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:49:13.878598+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:49:13.882213+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:49:13.882606+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:13.883020+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:13.886066+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:13.896448+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:49:13.897855+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:13.898222+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:13.898334+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:49:13.927052+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:49:13.934570+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:49:13.942488+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:50:44.423065+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:50:44.426704+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:50:44.426904+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.427106+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.428963+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.441207+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:50:44.442627+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.442962+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.443078+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.495856+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:50:44.499445+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:50:44.521296+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:50:44.612419+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:50:44.614246+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:50:44.614392+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.614540+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.615753+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.623880+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:50:44.625398+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.625685+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.625845+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.659847+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:50:44.673415+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:50:44.764604+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:50:44.766639+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:50:44.766804+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.766994+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.768594+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.778573+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:50:44.779797+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.780293+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.780438+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.807392+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:50:44.816484+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:50:44.823067+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:50:44.907565+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:50:44.909166+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:50:44.909291+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.909487+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.910945+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.918434+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:50:44.919902+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.920333+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.920474+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:44.948242+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:50:44.951152+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:50:45.039163+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:50:45.041445+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:50:45.050711+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:50:45.051887+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:50:45.060440+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:50:45.127156+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:50:45.128790+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:50:45.129012+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:45.129148+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:45.130505+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:45.137306+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:50:45.138992+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:45.139378+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:45.139556+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:45.177238+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:50:45.181274+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:50:45.199866+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:50:52.004523+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:50:52.006620+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:50:52.006767+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:52.006914+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:52.008280+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:52.021717+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:50:52.023270+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:52.023562+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:52.023680+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:52.062233+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:50:52.077191+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:50:52.168046+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:50:52.169657+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:50:52.169784+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:52.169920+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:52.171021+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:52.180019+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:50:52.181773+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:52.182139+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:52.182256+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:52.208618+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:50:52.215576+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:50:52.224956+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:50:52.312521+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:50:52.315168+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:50:52.322761+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:50:52.323732+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:50:52.334978+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:50:54.734465+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:50:54.736383+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:50:54.744706+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:50:54.745823+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:50:54.754693+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:50:56.454107+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"login"},"request_uri":"https://127.0.0.1:8000/login","method":"POST"} []
[2020-07-09T11:50:56.456144+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:50:56.464403+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:50:56.465976+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:50:56.467237+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:50:56.643292+00:00] security.INFO: User has been authenticated successfully. {"username":"eldji22@hotmail.fr"} []
[2020-07-09T11:50:56.668053+00:00] doctrine.DEBUG: SELECT t0.refresh_token AS refresh_token_1, t0.username AS username_2, t0.valid AS valid_3, t0.id AS id_4 FROM refresh_tokens t0 WHERE t0.refresh_token = ? ["93e9b2e436ff7074d7e61077ea [...]"] []
[2020-07-09T11:50:56.669219+00:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2020-07-09T11:50:56.669746+00:00] doctrine.DEBUG: INSERT INTO refresh_tokens (refresh_token, username, valid) VALUES (?, ?, ?) {"1":"93e9b2e436ff7074d7e61077ea [...]","2":"eldji22@hotmail.fr","3":"2020-08-08T11:50:56+00:00"} []
[2020-07-09T11:50:56.670283+00:00] doctrine.DEBUG: "COMMIT" [] []
[2020-07-09T11:50:56.873748+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:50:57.078431+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:50:57.080717+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:50:57.092642+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:50:57.093747+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:50:57.104559+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:50:57.180351+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-09T11:50:57.182296+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:50:57.182437+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:57.182581+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:57.183775+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:57.191297+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:50:57.192397+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:57.192639+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:57.192744+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:57.202236+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-09T11:50:58.850283+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:50:58.852324+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:50:58.852496+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:58.852701+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:58.854327+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:58.867368+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:50:58.869193+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:58.869575+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:58.869729+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:58.910481+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:50:58.926848+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:50:59.016173+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:50:59.018920+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:50:59.019166+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:59.019407+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:59.020981+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:59.030483+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:50:59.031790+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:59.032155+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:59.032352+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:50:59.058514+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:50:59.067228+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:50:59.073824+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:50:59.160982+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:50:59.163472+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:50:59.173277+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:50:59.174591+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:50:59.182983+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:54:38.179025+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:54:38.181885+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:54:38.182125+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.182297+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.183863+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.197318+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:54:38.199478+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.199926+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.200069+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.250652+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:54:38.253857+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:54:38.279152+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:54:38.366880+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:54:38.368371+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:54:38.368496+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.368632+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.369878+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.379163+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:54:38.380438+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.380725+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.380903+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.413970+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:54:38.427394+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:54:38.513255+00:00] request.INFO: Matched route "api_clients_GET_collection". {"route":"api_clients_GET_collection","route_parameters":{"_route":"api_clients_GET_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Client","_api_collection_operation_name":"GET"},"request_uri":"https://127.0.0.1:8000/api/clients","method":"GET"} []
[2020-07-09T11:54:38.514614+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:54:38.514740+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.514876+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.515967+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.524862+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:54:38.526561+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.526838+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.526955+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.553319+00:00] doctrine.DEBUG: SELECT c0_.id AS id_0, c0_.nom_complet AS nom_complet_1, c0_.telephone AS telephone_2, c0_.adresse AS adresse_3, c0_.created_at AS created_at_4, c0_.updated_at AS updated_at_5 FROM client c0_ ORDER BY c0_.id ASC LIMIT 30 [] []
[2020-07-09T11:54:38.559524+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.total_vente AS total_vente_2, t0.date_vente AS date_vente_3, t0.type_paiement AS type_paiement_4, t0.montant_verse AS montant_verse_5, t0.montant_rendu AS montant_rendu_6, t0.created_at AS created_at_7, t0.updated_at AS updated_at_8, t0.client_id AS client_id_9 FROM vente t0 WHERE t0.client_id = ? [1] []
[2020-07-09T11:54:38.567804+00:00] doctrine.DEBUG: SELECT count(c0_.id) AS sclr_0 FROM client c0_ [] []
[2020-07-09T11:54:38.647252+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:54:38.648874+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:54:38.649050+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.649184+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.650280+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.660458+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:54:38.661810+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.662089+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.662201+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:38.688529+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:54:38.692730+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:54:38.783683+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:54:38.787087+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:54:38.796327+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:54:38.797587+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:54:38.808305+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:54:39.112226+00:00] request.INFO: Matched route "api_ventes_get_collection". {"route":"api_ventes_get_collection","route_parameters":{"_route":"api_ventes_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Vente","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/ventes","method":"GET"} []
[2020-07-09T11:54:39.114113+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:54:39.114258+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:39.114412+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:39.115632+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:39.123264+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:54:39.125152+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:39.125640+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:39.125812+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:54:39.164556+00:00] doctrine.DEBUG: SELECT DISTINCT v0_.id AS id_0, v0_.id AS id_1 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id ORDER BY v0_.id ASC LIMIT 30 [] []
[2020-07-09T11:54:39.167586+00:00] doctrine.DEBUG: SELECT v0_.id AS id_0, v0_.total_vente AS total_vente_1, v0_.date_vente AS date_vente_2, v0_.type_paiement AS type_paiement_3, v0_.montant_verse AS montant_verse_4, v0_.montant_rendu AS montant_rendu_5, v0_.created_at AS created_at_6, v0_.updated_at AS updated_at_7, c1_.id AS id_8, c1_.nom_complet AS nom_complet_9, c1_.telephone AS telephone_10, c1_.adresse AS adresse_11, c1_.created_at AS created_at_12, c1_.updated_at AS updated_at_13, v2_.id AS id_14, v2_.quantite_vendue AS quantite_vendue_15, v2_.prix_vente_total AS prix_vente_total_16, v2_.prix_net_payer AS prix_net_payer_17, v2_.status AS status_18, v2_.commentaire AS commentaire_19, v2_.date_vente AS date_vente_20, v2_.created_at AS created_at_21, v2_.updated_at AS updated_at_22, p3_.id AS id_23, p3_.designation AS designation_24, p3_.taille AS taille_25, p3_.age AS age_26, p3_.pointure AS pointure_27, p3_.couleur AS couleur_28, p3_.prix_vente AS prix_vente_29, p3_.quantite AS quantite_30, p3_.created_at AS created_at_31, p3_.updated_at AS updated_at_32, f4_.id AS id_33, f4_.structure AS structure_34, f4_.nom_gerant AS nom_gerant_35, f4_.tel AS tel_36, f4_.email AS email_37, f4_.adresse AS adresse_38, f4_.commission AS commission_39, f4_.frais_exposition AS frais_exposition_40, f4_.token_access AS token_access_41, f4_.token_expire_at AS token_expire_at_42, f4_.created_at AS created_at_43, f4_.updated_at AS updated_at_44, c5_.id AS id_45, c5_.image AS image_46, c5_.libelle AS libelle_47, c5_.created_at AS created_at_48, c5_.updated_at AS updated_at_49, v0_.client_id AS client_id_50, v2_.vente_id AS vente_id_51, v2_.produit_id AS produit_id_52, p3_.fournisseur_id AS fournisseur_id_53, p3_.categorie_id AS categorie_id_54 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id WHERE v0_.id IN (?) ORDER BY v0_.id ASC [[1,2]] []
[2020-07-09T11:54:39.189680+00:00] doctrine.DEBUG: SELECT count(DISTINCT v0_.id) AS sclr_0 FROM vente v0_ LEFT JOIN client c1_ ON v0_.client_id = c1_.id LEFT JOIN vente_produit v2_ ON v0_.id = v2_.vente_id LEFT JOIN produit p3_ ON v2_.produit_id = p3_.id LEFT JOIN fournisseur f4_ ON p3_.fournisseur_id = f4_.id LEFT JOIN categorie c5_ ON p3_.categorie_id = c5_.id [] []
[2020-07-09T11:56:24.371790+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:56:24.374148+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:56:24.374314+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:56:24.374459+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:56:24.375772+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:56:24.384193+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:56:24.386417+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:56:24.386913+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:56:24.387119+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:56:24.419624+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:56:24.433855+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:56:24.523198+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-09T11:56:24.524979+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:56:24.525146+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:56:24.525331+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:56:24.526606+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:56:24.537383+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:56:24.538831+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:56:24.539161+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:56:24.539279+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:56:24.567618+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-09T11:56:24.581591+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-09T11:56:24.668405+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:56:24.670315+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:56:24.678602+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:56:24.680213+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:56:24.690818+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:57:30.895217+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-09T11:57:30.898514+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:57:30.898702+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:30.898920+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:30.900658+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:30.910088+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:57:30.911694+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:30.912223+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:30.912503+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:30.931897+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-09T11:57:30.947318+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-09T11:57:30.948361+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-09T11:57:31.048587+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-09T11:57:31.051111+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:57:31.051268+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.051420+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.053040+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.061814+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:57:31.063185+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.063492+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.063660+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.073192+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-09T11:57:31.164600+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-09T11:57:31.166062+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:57:31.166222+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.166429+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.167664+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.176180+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:57:31.177366+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.177633+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.177748+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.184202+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-09T11:57:31.279171+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:57:31.281300+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:57:31.281508+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.281692+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.283349+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.292694+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:57:31.294371+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.294672+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.294817+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:31.322259+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:57:31.325919+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:57:31.411058+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:57:31.413478+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:57:31.422529+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:57:31.423664+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:57:31.431775+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:57:39.734975+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-09T11:57:39.736931+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:57:39.737107+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:39.737244+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:39.738976+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:39.750463+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:57:39.751672+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:39.752217+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:39.752487+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:39.788676+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-09T11:57:39.804589+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-09T11:57:39.908429+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:57:39.910461+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:57:39.910734+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:39.910886+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:39.912039+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:39.922724+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:57:39.924748+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:39.925177+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:39.925406+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:57:39.962102+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:57:39.977739+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:57:40.076823+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:57:40.079201+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:57:40.089793+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:57:40.091333+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:57:40.100843+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:58:00.035425+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-09T11:58:00.037355+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:58:00.037517+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.037703+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.039108+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.047570+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:58:00.049673+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.050180+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.050355+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.071169+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-09T11:58:00.087589+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-09T11:58:00.089073+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-09T11:58:00.173457+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-09T11:58:00.174912+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:58:00.175236+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.175608+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.177924+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.187546+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:58:00.188735+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.189083+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.189190+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.200046+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-09T11:58:00.284539+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-09T11:58:00.286441+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:58:00.286658+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.286872+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.288897+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.296710+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:58:00.297850+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.298098+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.298206+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.303762+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-09T11:58:00.401251+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:58:00.402851+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:58:00.402977+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.403113+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.404273+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.412489+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:58:00.415312+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.415840+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.416020+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:00.444401+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:58:00.447850+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:58:00.537082+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:58:00.539838+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:58:00.547804+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:58:00.548626+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:58:00.558677+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:58:05.177905+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:58:05.180488+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:58:05.180643+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:05.180800+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:05.182426+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:05.190804+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:58:05.192857+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:05.193504+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:05.193706+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:05.229802+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:58:05.243967+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:58:05.341237+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-09T11:58:05.342944+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:58:05.343089+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:05.343237+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:05.345210+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:05.355720+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:58:05.357027+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:05.357323+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:05.357449+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:05.385656+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-09T11:58:05.400662+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-09T11:58:05.486020+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:58:05.488010+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:58:05.494834+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:58:05.495962+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:58:05.506994+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:58:14.024988+00:00] request.INFO: Matched route "produit". {"route":"produit","route_parameters":{"_route":"produit","_controller":"App\\Controller\\ProduitController::index"},"request_uri":"https://127.0.0.1:8000/api/produit","method":"GET"} []
[2020-07-09T11:58:14.026525+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:58:14.026709+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.026878+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.028449+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.038013+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:58:14.039202+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.039500+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.039607+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.060250+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.designation AS designation_2, t0.taille AS taille_3, t0.age AS age_4, t0.pointure AS pointure_5, t0.couleur AS couleur_6, t0.prix_vente AS prix_vente_7, t0.quantite AS quantite_8, t0.created_at AS created_at_9, t0.updated_at AS updated_at_10, t0.fournisseur_id AS fournisseur_id_11, t0.categorie_id AS categorie_id_12 FROM produit t0 ORDER BY t0.designation ASC [] []
[2020-07-09T11:58:14.076224+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 WHERE t0.id = ? [1] []
[2020-07-09T11:58:14.077599+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 WHERE t0.id = ? [1] []
[2020-07-09T11:58:14.162570+00:00] request.INFO: Matched route "category_indexshow". {"route":"category_indexshow","route_parameters":{"_route":"category_indexshow","_controller":"App\\Controller\\CategorieController::indexCategory"},"request_uri":"https://127.0.0.1:8000/api/showcategory","method":"GET"} []
[2020-07-09T11:58:14.164421+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:58:14.164619+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.164839+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.166684+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.177044+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:58:14.178255+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.178543+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.178665+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.183988+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.image AS image_2, t0.libelle AS libelle_3, t0.created_at AS created_at_4, t0.updated_at AS updated_at_5 FROM categorie t0 ORDER BY t0.libelle ASC [] []
[2020-07-09T11:58:14.269349+00:00] request.INFO: Matched route "fournisseur_index". {"route":"fournisseur_index","route_parameters":{"_route":"fournisseur_index","_controller":"App\\Controller\\FournisseurController::index"},"request_uri":"https://127.0.0.1:8000/api/fournisseur/","method":"GET"} []
[2020-07-09T11:58:14.270905+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:58:14.271057+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.271233+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.272641+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.281786+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:58:14.283120+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.283402+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.283516+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.291551+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.structure AS structure_2, t0.nom_gerant AS nom_gerant_3, t0.tel AS tel_4, t0.email AS email_5, t0.adresse AS adresse_6, t0.commission AS commission_7, t0.frais_exposition AS frais_exposition_8, t0.token_access AS token_access_9, t0.token_expire_at AS token_expire_at_10, t0.created_at AS created_at_11, t0.updated_at AS updated_at_12 FROM fournisseur t0 ORDER BY t0.structure ASC [] []
[2020-07-09T11:58:14.378079+00:00] request.INFO: Matched route "api_fournisseurs_get_collection". {"route":"api_fournisseurs_get_collection","route_parameters":{"_route":"api_fournisseurs_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Fournisseur","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/fournisseurs","method":"GET"} []
[2020-07-09T11:58:14.379783+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:58:14.379908+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.380042+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.381876+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.391078+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:58:14.392642+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.393036+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.393146+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:14.418720+00:00] doctrine.DEBUG: SELECT f0_.id AS id_0, f0_.structure AS structure_1, f0_.nom_gerant AS nom_gerant_2, f0_.tel AS tel_3, f0_.email AS email_4, f0_.adresse AS adresse_5, f0_.commission AS commission_6, f0_.frais_exposition AS frais_exposition_7, f0_.token_access AS token_access_8, f0_.token_expire_at AS token_expire_at_9, f0_.created_at AS created_at_10, f0_.updated_at AS updated_at_11 FROM fournisseur f0_ ORDER BY f0_.id ASC LIMIT 30 [] []
[2020-07-09T11:58:14.421746+00:00] doctrine.DEBUG: SELECT count(f0_.id) AS sclr_0 FROM fournisseur f0_ [] []
[2020-07-09T11:58:14.519453+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:58:14.521325+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:58:14.527874+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:58:14.528927+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:58:14.538584+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T11:58:53.344653+00:00] request.INFO: Matched route "api_depots_get_collection". {"route":"api_depots_get_collection","route_parameters":{"_route":"api_depots_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Depot","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/depots","method":"GET"} []
[2020-07-09T11:58:53.347126+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:58:53.347309+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:53.347633+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:53.349619+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:53.360100+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:58:53.361550+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:53.361829+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:53.361975+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:53.404097+00:00] doctrine.DEBUG: SELECT d0_.id AS id_0, d0_.stock_initial AS stock_initial_1, d0_.quantite_deposee AS quantite_deposee_2, d0_.total_stock_apres_depot AS total_stock_apres_depot_3, d0_.quantite_vendue AS quantite_vendue_4, d0_.stock_final AS stock_final_5, d0_.created_at AS created_at_6, d0_.updated_at AS updated_at_7, p1_.id AS id_8, p1_.designation AS designation_9, p1_.taille AS taille_10, p1_.age AS age_11, p1_.pointure AS pointure_12, p1_.couleur AS couleur_13, p1_.prix_vente AS prix_vente_14, p1_.quantite AS quantite_15, p1_.created_at AS created_at_16, p1_.updated_at AS updated_at_17, f2_.id AS id_18, f2_.structure AS structure_19, f2_.nom_gerant AS nom_gerant_20, f2_.tel AS tel_21, f2_.email AS email_22, f2_.adresse AS adresse_23, f2_.commission AS commission_24, f2_.frais_exposition AS frais_exposition_25, f2_.token_access AS token_access_26, f2_.token_expire_at AS token_expire_at_27, f2_.created_at AS created_at_28, f2_.updated_at AS updated_at_29, c3_.id AS id_30, c3_.image AS image_31, c3_.libelle AS libelle_32, c3_.created_at AS created_at_33, c3_.updated_at AS updated_at_34, d0_.produit_id AS produit_id_35, p1_.fournisseur_id AS fournisseur_id_36, p1_.categorie_id AS categorie_id_37 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id ORDER BY d0_.id ASC LIMIT 30 [] []
[2020-07-09T11:58:53.419926+00:00] doctrine.DEBUG: SELECT count(DISTINCT d0_.id) AS sclr_0 FROM depot d0_ LEFT JOIN produit p1_ ON d0_.produit_id = p1_.id LEFT JOIN fournisseur f2_ ON p1_.fournisseur_id = f2_.id LEFT JOIN categorie c3_ ON p1_.categorie_id = c3_.id [] []
[2020-07-09T11:58:53.516106+00:00] request.INFO: Matched route "api_produits_get_collection". {"route":"api_produits_get_collection","route_parameters":{"_route":"api_produits_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Produit","_api_collection_operation_name":"get"},"request_uri":"https://127.0.0.1:8000/api/produits","method":"GET"} []
[2020-07-09T11:58:53.517890+00:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2020-07-09T11:58:53.518040+00:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:53.518188+00:00] security.DEBUG: Calling getCredentials() on guard authenticator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:53.519410+00:00] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:53.528857+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.email = ? LIMIT 1 ["eldji22@hotmail.fr"] []
[2020-07-09T11:58:53.530046+00:00] security.INFO: Guard authentication successful! {"token":{"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken":"JWTUserToken(user=\"eldji22@hotmail.fr\", authenticated=true, roles=\"ROLE_ADMIN, ROLE_USER\")"},"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:53.530314+00:00] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:53.530422+00:00] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2020-07-09T11:58:53.563733+00:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.designation AS designation_1, p0_.taille AS taille_2, p0_.age AS age_3, p0_.pointure AS pointure_4, p0_.couleur AS couleur_5, p0_.prix_vente AS prix_vente_6, p0_.quantite AS quantite_7, p0_.created_at AS created_at_8, p0_.updated_at AS updated_at_9, f1_.id AS id_10, f1_.structure AS structure_11, f1_.nom_gerant AS nom_gerant_12, f1_.tel AS tel_13, f1_.email AS email_14, f1_.adresse AS adresse_15, f1_.commission AS commission_16, f1_.frais_exposition AS frais_exposition_17, f1_.token_access AS token_access_18, f1_.token_expire_at AS token_expire_at_19, f1_.created_at AS created_at_20, f1_.updated_at AS updated_at_21, c2_.id AS id_22, c2_.image AS image_23, c2_.libelle AS libelle_24, c2_.created_at AS created_at_25, c2_.updated_at AS updated_at_26, p0_.fournisseur_id AS fournisseur_id_27, p0_.categorie_id AS categorie_id_28 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id ORDER BY p0_.id ASC LIMIT 30 [] []
[2020-07-09T11:58:53.581868+00:00] doctrine.DEBUG: SELECT count(DISTINCT p0_.id) AS sclr_0 FROM produit p0_ LEFT JOIN fournisseur f1_ ON p0_.fournisseur_id = f1_.id INNER JOIN categorie c2_ ON p0_.categorie_id = c2_.id [] []
[2020-07-09T11:58:53.677224+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T11:58:53.680390+00:00] security.DEBUG: Read existing security token from the session. {"key":"_security_main","token_class":"Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken"} []
[2020-07-09T11:58:53.688213+00:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.email AS email_2, t0.roles AS roles_3, t0.password AS password_4, t0.name AS name_5, t0.phone AS phone_6, t0.is_activated AS is_activated_7, t0.created_at AS created_at_8, t0.updated_at AS updated_at_9 FROM user t0 WHERE t0.id = ? [2] []
[2020-07-09T11:58:53.689406+00:00] security.DEBUG: User was reloaded from a user provider. {"provider":"Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider","username":"eldji22@hotmail.fr"} []
[2020-07-09T11:58:53.698874+00:00] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2020-07-09T21:43:12.231337+00:00] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2020-07-09T21:43:12.511193+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'autres_operation' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T21:43:12.573794+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'autres_operation' */ WHERE k.table_name = 'autres_operation' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T21:43:12.605201+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'autres_operation' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T21:43:12.606957+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'autres_operation' [] []
[2020-07-09T21:43:12.637838+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'caisse' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T21:43:12.641189+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'caisse' */ WHERE k.table_name = 'caisse' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T21:43:12.659012+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'caisse' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T21:43:12.660675+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'caisse' [] []
[2020-07-09T21:43:12.662053+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'categorie' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T21:43:12.665071+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'categorie' */ WHERE k.table_name = 'categorie' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T21:43:12.667637+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'categorie' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T21:43:12.669186+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'categorie' [] []
[2020-07-09T21:43:12.670485+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'client' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T21:43:12.673409+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'client' */ WHERE k.table_name = 'client' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T21:43:12.675459+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'client' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T21:43:12.676925+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'client' [] []
[2020-07-09T21:43:12.678410+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'depot' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T21:43:12.681931+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'depot' */ WHERE k.table_name = 'depot' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T21:43:12.684029+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'depot' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T21:43:12.685918+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'depot' [] []
[2020-07-09T21:43:12.687278+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'fournisseur' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T21:43:12.691369+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'fournisseur' */ WHERE k.table_name = 'fournisseur' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T21:43:12.693297+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'fournisseur' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T21:43:12.694916+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'fournisseur' [] []
[2020-07-09T21:43:12.696284+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T21:43:12.698603+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'migration_versions' */ WHERE k.table_name = 'migration_versions' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T21:43:12.700437+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'migration_versions' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T21:43:12.701888+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'migration_versions' [] []
[2020-07-09T21:43:12.703229+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'produit' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T21:43:12.707121+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'produit' */ WHERE k.table_name = 'produit' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T21:43:12.709287+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'produit' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T21:43:12.711596+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'produit' [] []
[2020-07-09T21:43:12.712950+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'refresh_tokens' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T21:43:12.715759+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'refresh_tokens' */ WHERE k.table_name = 'refresh_tokens' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T21:43:12.717721+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'refresh_tokens' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T21:43:12.719241+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'refresh_tokens' [] []
[2020-07-09T21:43:12.720608+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'user' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T21:43:12.723972+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'user' */ WHERE k.table_name = 'user' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T21:43:12.725877+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'user' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T21:43:12.727523+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'user' [] []
[2020-07-09T21:43:12.728864+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'vente' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T21:43:12.732342+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'vente' */ WHERE k.table_name = 'vente' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T21:43:12.734315+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'vente' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T21:43:12.736153+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'vente' [] []
[2020-07-09T21:43:12.737451+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'vente_produit' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T21:43:12.741089+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'vente_produit' */ WHERE k.table_name = 'vente_produit' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T21:43:12.743325+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'vente_produit' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T21:43:12.745600+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'vente_produit' [] []
[2020-07-09T22:34:53.190880+00:00] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2020-07-09T22:34:53.192945+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'autres_operation' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T22:34:53.194786+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'autres_operation' */ WHERE k.table_name = 'autres_operation' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T22:34:53.195325+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'autres_operation' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T22:34:53.195802+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'autres_operation' [] []
[2020-07-09T22:34:53.196241+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'caisse' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T22:34:53.197024+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'caisse' */ WHERE k.table_name = 'caisse' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T22:34:53.197500+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'caisse' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T22:34:53.197960+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'caisse' [] []
[2020-07-09T22:34:53.198349+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'categorie' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T22:34:53.199089+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'categorie' */ WHERE k.table_name = 'categorie' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T22:34:53.199559+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'categorie' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T22:34:53.199984+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'categorie' [] []
[2020-07-09T22:34:53.200383+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'client' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T22:34:53.201160+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'client' */ WHERE k.table_name = 'client' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T22:34:53.201607+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'client' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T22:34:53.202022+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'client' [] []
[2020-07-09T22:34:53.202371+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'depot' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T22:34:53.203278+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'depot' */ WHERE k.table_name = 'depot' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T22:34:53.203798+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'depot' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T22:34:53.204334+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'depot' [] []
[2020-07-09T22:34:53.204716+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'fournisseur' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T22:34:53.205830+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'fournisseur' */ WHERE k.table_name = 'fournisseur' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T22:34:53.206292+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'fournisseur' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T22:34:53.206705+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'fournisseur' [] []
[2020-07-09T22:34:53.207112+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T22:34:53.207725+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'migration_versions' */ WHERE k.table_name = 'migration_versions' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T22:34:53.208178+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'migration_versions' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T22:34:53.208607+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'migration_versions' [] []
[2020-07-09T22:34:53.208981+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'produit' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T22:34:53.209989+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'produit' */ WHERE k.table_name = 'produit' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T22:34:53.210501+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'produit' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T22:34:53.211134+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'produit' [] []
[2020-07-09T22:34:53.211536+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'refresh_tokens' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T22:34:53.212228+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'refresh_tokens' */ WHERE k.table_name = 'refresh_tokens' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T22:34:53.212674+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'refresh_tokens' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T22:34:53.213128+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'refresh_tokens' [] []
[2020-07-09T22:34:53.213493+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'user' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T22:34:53.214395+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'user' */ WHERE k.table_name = 'user' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T22:34:53.214864+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'user' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T22:34:53.215356+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'user' [] []
[2020-07-09T22:34:53.215766+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'vente' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T22:34:53.216688+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'vente' */ WHERE k.table_name = 'vente' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T22:34:53.217203+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'vente' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T22:34:53.217758+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'vente' [] []
[2020-07-09T22:34:53.218137+00:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'caravane_db' AND TABLE_NAME = 'vente_produit' ORDER BY ORDINAL_POSITION ASC [] []
[2020-07-09T22:34:53.219158+00:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'vente_produit' */ WHERE k.table_name = 'vente_produit' AND k.table_schema = 'caravane_db' /*!50116 AND c.constraint_schema = 'caravane_db' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2020-07-09T22:34:53.219684+00:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'vente_produit' AND TABLE_SCHEMA = 'caravane_db' ORDER BY SEQ_IN_INDEX ASC [] []
[2020-07-09T22:34:53.220326+00:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'vente_produit' [] []
[2020-07-09T22:36:39.558176+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":""},"request_uri":"https://127.0.0.1:8000/","method":"GET"} []
[2020-07-09T22:36:39.827374+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2020-07-09T22:36:43.153259+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"f64e09"},"request_uri":"https://127.0.0.1:8000/_wdt/f64e09","method":"GET"} []
[2020-07-09T22:36:44.132382+00:00] request.INFO: Matched route "index". {"route":"index","route_parameters":{"_route":"index","_controller":"App\\Controller\\HomeController::index","vueRouting":"favicon.ico"},"request_uri":"https://127.0.0.1:8000/favicon.ico","method":"GET"} []
[2020-07-09T22:36:44.134570+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
