(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('vue')) :
	typeof define === 'function' && define.amd ? define(['vue'], factory) :
	(global.vuetifyToast = factory(global.Vue));
}(this, (function (Vue) { 'use strict';

Vue = Vue && Vue.hasOwnProperty('default') ? Vue['default'] : Vue;

var Toast = { render: function () {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('v-snackbar', { staticClass: "application", attrs: { "timeout": _vm.timeout, "color": _vm.color }, on: { "click": _vm.dismiss }, model: { value: _vm.active, callback: function ($$v) {
          _vm.active = $$v;
        }, expression: "active" } }, [_vm.icon.length > 0 ? _c('v-icon', { attrs: { "dark": "", "left": "" } }, [_vm._v(" " + _vm._s(_vm.icon) + " ")]) : _vm._e(), _vm._v(" " + _vm._s(_vm.text) + " ")], 1);
  }, staticRenderFns: [],

  data: function data() {
    return {
      active: false,
      text: '',
      icon: '',
      color: 'info',
      timeout: 3000,
      dismissible: true
    };
  },

  methods: {
    show: function show(options) {
      var this$1 = this;
      if ( options === void 0 ) options = {};

      if (this.active) {
        this.close();
        this.$nextTick(function () { return this$1.show(options); });
        return;
      }

      Object.keys(options).forEach(function (field) { return this$1[field] = options[field]; });

      this.active = true;
    },

    close: function close() {
      this.active = false;
    },

    dismiss: function dismiss() {
      if (this.dismissible) {
        this.active = false;
      }
    }
  }

};

var colors = ['success', 'info', 'error'];

var defaultOptions = {
  text: '',
  icon: '',
  color: 'info',
  timeout: 3000,
  dismissible: true
};

var toastCmp = null;

function createToastCmp() {
  var cmp = new Vue(Toast);

  document.body.appendChild(cmp.$mount().$el);

  return cmp;
}

function getToastCmp() {
  if (!toastCmp) {
    toastCmp = createToastCmp();
  }

  return toastCmp;
}

function show(options) {
  if ( options === void 0 ) options = {};

  getToastCmp().show(Object.assign({}, defaultOptions, options));
}

function close() {
  getToastCmp().close();
}

function createShorthands() {
  var shorthands = {};

  colors.forEach(function (color) { return shorthands[color] = function (text, options) {
    if ( options === void 0 ) options = {};

    return show(Object.assign({ color: color, text: text }, options));
 }    });

  return shorthands;
}

var index = Object.assign({
  show: show,
  close: close,
  getToastCmp: getToastCmp,
  defaultOptions: defaultOptions
}, createShorthands());

return index;

})));
