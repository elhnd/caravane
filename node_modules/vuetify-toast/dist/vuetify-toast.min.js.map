{"version":3,"file":"vuetify-toast.min.js","sources":["../src/Toast.vue","../src/index.js"],"sourcesContent":["<template>\r\n\r\n  <v-snackbar\r\n    :timeout=\"timeout\"\r\n    :color=\"color\"\r\n    v-model=\"active\"\r\n    class=\"application\"\r\n    @click=\"dismiss\">\r\n\r\n    <v-icon\r\n      dark\r\n      left\r\n      v-if=\"icon.length > 0\">\r\n      {{ icon }}\r\n    </v-icon>\r\n\r\n    {{ text }}\r\n\r\n  </v-snackbar>\r\n\r\n</template>\r\n\r\n\r\n<script>\r\n\r\nexport default {\r\n\r\n  data() {\r\n    return {\r\n      active: false,\r\n      text: '',\r\n      icon: '',\r\n      color: 'info',\r\n      timeout: 3000,\r\n      dismissible: true,\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    show(options = {}) {\r\n      if (this.active) {\r\n        this.close();\r\n        this.$nextTick(() => this.show(options));\r\n        return;\r\n      }\r\n\r\n      Object.keys(options).forEach(field => (this[field] = options[field]));\r\n\r\n      this.active = true;\r\n    },\r\n\r\n    close() {\r\n      this.active = false;\r\n    },\r\n\r\n    dismiss() {\r\n      if (this.dismissible) {\r\n        this.active = false;\r\n      }\r\n    },\r\n  },\r\n\r\n};\r\n\r\n</script>\r\n","import Vue from 'vue';\r\nimport Toast from './Toast.vue';\r\n\r\n\r\nconst colors = ['success', 'info', 'error'];\r\n\r\nconst defaultOptions = {\r\n  text: '',\r\n  icon: '',\r\n  color: 'info',\r\n  timeout: 3000,\r\n  dismissible: true,\r\n};\r\n\r\nlet toastCmp = null;\r\n\r\n\r\nfunction createToastCmp() {\r\n  const cmp = new Vue(Toast);\r\n\r\n  document.body.appendChild(cmp.$mount().$el);\r\n\r\n  return cmp;\r\n}\r\n\r\n\r\nfunction getToastCmp() {\r\n  if (!toastCmp) {\r\n    toastCmp = createToastCmp();\r\n  }\r\n\r\n  return toastCmp;\r\n}\r\n\r\n\r\nfunction show(options = {}) {\r\n  getToastCmp().show({ ...defaultOptions, ...options });\r\n}\r\n\r\n\r\nfunction close() {\r\n  getToastCmp().close();\r\n}\r\n\r\n\r\nfunction createShorthands() {\r\n  const shorthands = {};\r\n\r\n  colors.forEach(color => (shorthands[color] = (text, options = {}) => show({ color, text, ...options })));\r\n\r\n  return shorthands;\r\n}\r\n\r\n\r\nexport default {\r\n  show,\r\n  close,\r\n  getToastCmp,\r\n  defaultOptions,\r\n  ...createShorthands(),\r\n};\r\n"],"names":["shorthands","render","options","this","active","close","$nextTick","show","keys","forEach","field","dismissible","colors","defaultOptions","toastCmp","getToastCmp","cmp","Vue","Toast","body","appendChild","$mount","$el","color","text"],"mappings":"iQAyBA,ICqBQA,KDrBQC,waAIF,OACF,QACA,SACC,eACE,iBACI,2BAKVC,oCACCC,KAAKC,mBACFC,kBACAC,4BAAgBH,EAAKI,KAAKL,YAI1BM,KAAKN,GAASO,iBAAQC,UAAUP,EAAKO,GAASR,EAAQQ,UAExDN,QAAS,yBAITA,QAAS,sBAIVD,KAAKQ,mBACFP,QAAS,MCrDhBQ,GAAU,UAAW,OAAQ,SAE7BC,QACE,QACA,SACC,eACE,iBACI,GAGXC,EAAW,KAYf,SAASC,IATT,IACQC,SASDF,IATCE,EAAM,IAAIC,EAAIC,YAEXC,KAAKC,YAAYJ,EAAIK,SAASC,OAEhCN,GASAF,EAIT,SAASP,EAAKL,0BACEK,sBAAUM,EAAmBX,uCAI7C,eACgBG,0CAKRL,OAECS,iBAAQc,UAAUvB,EAAWuB,YAAUC,EAAMtB,6BAAiBK,uBAAOgB,OAAOC,GAAStB,OAErFF"}