.test {
  font-size: 15px !important;
}
.v-navigation-drawer .v-list-group--active .v-list-group__items {
  background: #61432bc9 !important;
}
.v-navigation-drawer .v-list-group--active .v-list-group__header {
  background: #61432bc9 !important;
}
.v-navigation-drawer .v-list-group--active .v-list-item-title {
  font-size: 40px !important;
}
.v-navigation-drawer .v-list .theme--dark .v-icon {
  color: #fff !important;
}
.v-navigation-drawer .v-list .theme--dark .v-list-item-content {
  font-size: 40px !important;
}
.active-item {
  position: relative !important;
}
.active-item::before {
  content: "" !important;
  position: absolute !important;
  top: 0 !important;
  left: 0 !important;
  width: 100% !important;
  height: 100% !important;
  opacity: 0.3 !important;
  background-color: #61432bc9 !important;
}
.v-list-item-title {
  font-size: 40px !important;
}


.list-enter[data-v-a0d96132],
.list-leave-to[data-v-a0d96132] {
  opacity: 0;
}
.list-enter-active[data-v-a0d96132],
.list-leave-active[data-v-a0d96132] {
  transition: opacity 0.5s ease;
}
.list-move[data-v-a0d96132] {
  transition: transform 0.5s ease-out;
}


.v-progress-circular[data-v-36082654] {
  margin: 1rem;
}

.brunfonce {
  background: #d7ccc8 !important;
}
td {
  font-size: 16px !important;
  vertical-align: middle !important;
}
.v-progress-circular {
  margin: 1rem !important;
}
th {
  font-size: 16px !important;
  vertical-align: middle !important;
}
table {
  font-family: "Arial";
  border-collapse: collapse;
  border: 1px solid #eee;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th,
table td {
  color: #424141;
  border: 1px solid #eee;
  padding: 12px 35px;
  border-collapse: collapse;
}
table th {
  background: #d7ccc8;
  color: #fff;
  text-transform: uppercase;
  font-size: 12px;
}
table th.last {
  border-right: none;
}

.brunfonce {
  background: #d7ccc8 !important;
}
td {
  font-size: 16px !important;
  vertical-align: middle !important;
}
.v-progress-circular {
  margin: 1rem !important;
}
th {
  font-size: 16px !important;
  vertical-align: middle !important;
}
table {
  font-family: "Arial";
  border-collapse: collapse;
  border: 1px solid #eee;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th,
table td {
  color: #424141;
  border: 1px solid #eee;
  padding: 12px 35px;
  border-collapse: collapse;
}
table th {
  background: #d7ccc8;
  color: #fff;
  text-transform: uppercase;
  font-size: 12px;
}
table th.last {
  border-right: none;
}

.brunfonce {
  background: #d7ccc8 !important;
}
td {
  font-size: 16px !important;
  vertical-align: middle !important;
}
.v-progress-circular {
  margin: 1rem !important;
}
th {
  font-size: 16px !important;
  vertical-align: middle !important;
}
table {
  font-family: "Arial";
  border-collapse: collapse;
  border: 1px solid #eee;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th,
table td {
  color: #424141;
  border: 1px solid #eee;
  padding: 12px 35px;
  border-collapse: collapse;
}
table th {
  background: #d7ccc8;
  color: #fff;
  text-transform: uppercase;
  font-size: 12px;
}
table th.last {
  border-right: none;
}

.v-sheet--offset[data-v-81716d76] {
  top: -20px;
  position: relative;
}
.brunfonce[data-v-81716d76] {
  background: #d7ccc8 !important;
}


.v-progress-circular[data-v-72fe0360] {
  margin: 1rem;
}


.v-progress-circular[data-v-613e08c0] {
  margin: 1rem;
}

.brunfonce {
  background: #d7ccc8 !important;
}
td {
  font-size: 16px !important;
  vertical-align: middle !important;
}
.v-progress-circular {
  margin: 1rem !important;
}
th {
  font-size: 16px !important;
  vertical-align: middle !important;
}
table {
  font-family: "Arial";
  border-collapse: collapse;
  border: 1px solid #eee;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th,
table td {
  color: #424141;
  border: 1px solid #eee;
  padding: 12px 35px;
  border-collapse: collapse;
}
table th {
  background: #d7ccc8;
  color: #fff;
  text-transform: uppercase;
  font-size: 12px;
}
table th.last {
  border-right: none;
}

.brunfonce {
  background: #d7ccc8 !important;
}
td {
  font-size: 16px !important;
  vertical-align: middle !important;
}
.v-progress-circular {
  margin: 1rem !important;
}
th {
  font-size: 16px !important;
  vertical-align: middle !important;
}
table {
  font-family: "Arial";
  border-collapse: collapse;
  border: 1px solid #eee;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th,
table td {
  color: #424141;
  border: 1px solid #eee;
  padding: 12px 35px;
  border-collapse: collapse;
}
table th {
  background: #d7ccc8;
  color: #fff;
  text-transform: uppercase;
  font-size: 12px;
}
table th.last {
  border-right: none;
}

.brunfonce {
  background: #d7ccc8 !important;
}
td {
  font-size: 16px !important;
  vertical-align: middle !important;
}
.v-progress-circular {
  margin: 1rem !important;
}
th {
  font-size: 16px !important;
  vertical-align: middle !important;
}
table {
  font-family: "Arial";
  border-collapse: collapse;
  border: 1px solid #eee;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th,
table td {
  color: #424141;
  border: 1px solid #eee;
  padding: 12px 35px;
  border-collapse: collapse;
}
table th {
  background: #d7ccc8;
  color: #fff;
  text-transform: uppercase;
  font-size: 12px;
}
table th.last {
  border-right: none;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/